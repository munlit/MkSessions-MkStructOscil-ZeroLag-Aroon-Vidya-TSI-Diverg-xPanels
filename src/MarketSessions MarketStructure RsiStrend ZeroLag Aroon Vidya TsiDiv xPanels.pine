/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	Fx Market Sessions			║
/// ╔═══════════════════════════════╗
/// ║	Market Structure Oscillador	║
/// ╔═══════════════════════════════╗
/// ║	RSI Supertrend				║
/// ╔═══════════════════════════════╗
/// ║	ZeroLag Trend				║
/// ╔═══════════════════════════════╗
/// ║	Aroon Oscillator			║
/// ╔═══════════════════════════════╗
/// ║	Volumatic VIDYA				║
/// ║	@	Allen	㔬				║
/// ║	©	BigBeluga				║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║  Tsi & Divergences			║
/// ║  @	Allen.					║
/// ╚═══════════════════════════════╝

//@version=5
indicator(title							= 'FxMarketSessions & MarketStructureOscil & Rsi Supertrend & ZeroLag & Aroon & Vidya & TSI Diverg & xPanels [🎱 Allen 㔬]',
		  shorttitle            	    = 'MkS MSOsc RsiST ZLag oo/dya TSId xPnl [🎱 Allen 㔬]',
		  overlay						= true,
		  max_boxes_count				= 500,
		  max_labels_count				= 500,
		  max_lines_count				= 500,
		  max_bars_back					= 1000,
		  format						= format.price,		// format.percent,
		  precision						= 4)

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Globals
//// ───────────────────────

strGlobalExtendTooltip					= 'Indicador TSI basado en tendencia'
strGlobalOptionalTooltip				= 'Configuración de temporalidad adicional'
strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

globalGroupTimeframe					= 'Temporalidad Global'
showTsiMuDiTSIDivergs					= input.bool	(defval = true,			title = 'TSI & Divergences',			group = globalGroupTimeframe)
showTsiMuDiTSITendency					= input.bool	(defval = true,			title = 'Tsi de Tendencia',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
showTsiMuDiTSIMultitimeframe			= input.bool	(defval = false,		title = 'Multitimeframe',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
strGlobalMultiTimeFrame					= input.string 	(defval = 'Grafico',	title = 'Multi Timeframe',				group = globalGroupTimeframe,
			  options					=				['Grafico', '15 min', '30 min', '1 Hora', '2 Horas', '3 Horas', '4 Horas', '1 Dia', '1 Semana', '1 Mes'])
strGlobalMultiWaves						= input.string 	(defval = 'Aroon',		title = 'Ondas',						group = globalGroupTimeframe,
			  options					=				['Aroon', 'Supertrend'])
strGlobalColorSelector					= input.string 	(defval = "Allen",		title = "Color Selector",				group = globalGroupTimeframe,
			  options					=				["Allen", "Ultr", "Mono"])
			//   options					=				['Allen', 'Ultr', 'Inverse', 'Classic', 'Light', 'Mono'])
float insGlobalTFCoefficient			= 2

/// ───────────────────────
/// ─── Heikin Ashi
/// ───────────────────────

showGlobal_HknAshi						= input.bool	(defval = true,		title = 'Activar Heikin Ashi',			group = 'Heikin Ashi mode',				tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close

// gbl_Source_2							= showGlobal_HknAshi ? (heAsGblH + heAsGblL) / 2 : hl2
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3
// gbl_Source_4							= showGlobal_HknAshi ? (heAsGblO + heAsGblH + heAsGblL + heAsGblC) / 4 : ohlc4

//// ───────────────────────
/// ─── Switch
//// ───────────────────────

[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_long,	_co_gbl_short,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_neutral]						= switch	strGlobalColorSelector
	"Allen"								=> [#33FFAC,		#CCF8FF,		#30d453,		#EA1889,		#30d453,		#0035FF,		#CCF8FF]
	"Ultr"								=> [#00E7FD,		#FE0CB6,		#30d453,		#EA1889,		#30d453,		#0035FF,		#121F3D]
	"Mono"								=> [#CCF8FF,		#0C1633,		#CCF8FF,		#121F3D,		#E6F7FF,		#121F3D,		#676B79]

	// "Light"							=> [#2962FF,		#F23645,		#2962FF,		#F23645,		#FCFF8F]
	// "Inverse"						=> [#ADEB42,		#EA1889,		#33FFAC,		#CCF8FF,		#CCF8FF]
	// "Classic"						=> [#B1FF05,		#D11C36,		#B1FF05,		#D11C36,		#5C818A]

//// ───────────────────────
/// ─── Colors
//// ───────────────────────

_co_gbl_white							= #E6F7FF			//	CitiAccentUltraLightBlue			= #E6F7FF
_co_gbl_pink							= #FFB7FF			//	WavBehPink20						= #FFB7FF
_co_gbl_sky								= #0CF2F2			//	WavBehAqua50						= #0CF2F2	// SurfeSky400				= #88D7F0
_co_gbl_mint							= #4FFFC0			//	AllenMint50							= #4FFFC0
_co_gbl_green							= #30d453			//	AllenGreen50						= #30d453
_co_gbl_yellow							= #FDF43C			//	BrLiYel30							= #FDF43C
// _co_gbl_blue							= #4043F1
_co_gbl_blue							= #0035FF			//	ARoPrimary							= #0035FF
_co_gbl_black							= #0C1633			//	PlatziBlue80						= #0C1633
_co_gbl_light							= #FBFD73			//	BrLiYel10							= #FBFD73
_co_gbl_txt_dark						= #121F3D			//	PlatziBlue70						= #121F3D

//// ───────────────────────
/// ─── Types
//// ───────────────────────

type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index

//// ───────────────────────
/// ─── Functions
//// ───────────────────────

/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'

/// ─── function calculate MA
FunGlobalCalculateMA(_source, _length, _type) =>
	switch _type
		'SMA'							=> ta.sma	(_source, _length)
		'HMA'							=> ta.hma	(_source, _length)
		'EMA'							=> ta.ema	(_source, _length)
		'SMMA'							=> ta.rma	(_source, _length)
		'WMA'							=> ta.wma	(_source, _length)
		'VWMA'							=> ta.vwma	(_source, _length)
		'MFI'							=> ta.mfi	(_source, _length)

/// ─── Function create new table
FunGlobalNewTable(_box, _col, _row, _width, _bgcolor, _txt, _txtcolor, _txthalign, _txtsize) =>
	table.cell(table_id		            = _box,
		  column			            = _col,
		  row				            = _row,
		  width				            = _width,
		  bgcolor			            = _bgcolor,
		  text				            = _txt,
		  text_color		            = _txtcolor,
		  text_halign		            = _txthalign,
		  text_size			            = _txtsize
		  )

/// ─── Function calculate timeframe range
FunGlobalCalculateTimeframeRange(_coefficient, _timeframe) =>
	_x									= 4
	_mayor								= 480
	_minor								= 15
	_tonumber							= str.tonumber(_timeframe)
	_operat_coeff						= _tonumber * _coefficient
	_operat_minor						= _tonumber * _x
	_toresult							= str.tonumber(_timeframe)
	_conditional						= _tonumber >= _mayor ? _toresult : _tonumber <= _minor ? _operat_minor : _operat_coeff
	str.tostring(_conditional)

FunGlobalCalculateTimeframeVariant(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

gblSource								= globalTypeOHL.new()


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║	ZeroLag Trend				║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ＩＮＰＵＴＳ
//// ───────────────────────

co_zeLag_buy							= _co_gbl_up
co_zeLag_sell							= _co_gbl_dn
co_zeLag_signal							= _co_gbl_white
co_zeLag_text							= _co_gbl_light
co_zeLag_text_dark						= _co_gbl_txt_dark

zeLag_GroupVar							= 'ZeroLag Trend'
showZeLag_trend							= input.bool	(true,			title = 'Mostrar ZeroLag Trend',	group = zeLag_GroupVar,		inline = 'zerocheck')
showZeLag_level_box						= input.bool	(true,			title = 'Mostrar box ZeroLag',		group = zeLag_GroupVar,		inline = 'zerocheck')
zeLag_length							= input.int		(13,			title = 'Longitud',					group = zeLag_GroupVar)
zeLag_lengthEmax						= input.int		(20,			title = 'Longitud Ema',				group = zeLag_GroupVar)

var bZeLag_BOX							= box(na)
series float iZeLag_ATR					= ta.atr(200)

//// ───────────────────────
/// ＣＡＬＣＵＬＡＴＩＯＮＳ
//// ───────────────────────

/// ───────────────────────
/// ＰＬＯＴ
/// ───────────────────────

series float iZeLag_EMA					= ta.ema(gblSource.C, zeLag_length)
series float iZeLag_correction			= gblSource.C + (gblSource.C - iZeLag_EMA)				// factor zerolag
series float iZeLag_ZLMA				= ta.ema(iZeLag_correction, zeLag_length)
series float iZeLag_EMAx				= ta.ema(gblSource.C, zeLag_lengthEmax)

bool  zeLag_signal_buy					= ta.crossover(iZeLag_ZLMA, iZeLag_EMA)
bool  zeLag_signal_sell					= ta.crossunder(iZeLag_ZLMA, iZeLag_EMA)

// Determine the color of ZLMA based on its direction
co_zeLag_ZLMA							= iZeLag_ZLMA	> iZeLag_ZLMA[3]	? co_zeLag_buy	: iZeLag_ZLMA	< iZeLag_ZLMA[3]	? co_zeLag_sell	: na
co_zeLag_EMAx							= iZeLag_EMA	> iZeLag_EMA[3]		? co_zeLag_buy	: iZeLag_EMA	< iZeLag_EMA[3]		? co_zeLag_sell	: na
co_zeLag_EMA							= iZeLag_EMAx	< iZeLag_EMA		? co_zeLag_buy	: co_zeLag_sell			// ema color variant

// Method to draw a box on the chart
method FUN_zeLag_draw_box(color _color, top, _bottom, price) =>
	box.new(
			 bar_index, top, bar_index, _bottom, _color, 1, 
			 bgcolor					= color.new(_color, 90), 
			 text						= str.tostring(math.round(price, 2)), 
			 text_size					= size.tiny,
			 text_color					= chart.fg_color,
			 text_halign				= text.align_right,
			 force_overlay				= true
			 )

// Logic to draw trend levels as boxes on the chart
if showZeLag_level_box and showZeLag_trend
	bool _check_signals					= zeLag_signal_buy or zeLag_signal_sell // Check if there is an up or down signal

	switch
		// Draw a box when a bullish signal is detected
		zeLag_signal_buy				=> bZeLag_BOX		:= co_zeLag_buy.FUN_zeLag_draw_box(iZeLag_ZLMA, iZeLag_ZLMA - iZeLag_ATR, gblSource.C)

		// Draw a box when a bearish signal is detected
		zeLag_signal_sell				=> bZeLag_BOX		:= co_zeLag_sell.FUN_zeLag_draw_box(iZeLag_ZLMA + iZeLag_ATR, iZeLag_ZLMA, gblSource.C)

	switch
		// Extend the right side of the box if no new signal is detected
		not zeLag_signal_buy or not zeLag_signal_sell => bZeLag_BOX.set_right(bar_index + 4)  
		=> bZeLag_BOX := box(na) // Otherwise, reset the box

//// ───────────────────────
/// ＰＬＯＴ
//// ───────────────────────

// Plot the Zero-Lag Moving Average
plot_zeLag_EMA							= plot(showZeLag_trend ? iZeLag_EMA : na,			color = color.new(co_zeLag_EMA, 25),			linewidth = 1,		force_overlay		= true)
plot_zeLag_EMAx							= plot(showZeLag_trend ? iZeLag_EMAx : na,			color = color.new(co_zeLag_EMAx, 25),			linewidth = 2,		force_overlay		= true)
plot_zeLag_ZLMA							= plot(showZeLag_trend ? iZeLag_ZLMA : na,			color = color.new(co_zeLag_ZLMA, 75),			linewidth = 1,		force_overlay		= true)
fill(plot_zeLag_ZLMA, plot_zeLag_EMAx, iZeLag_ZLMA, iZeLag_EMAx,							color.new(co_zeLag_EMAx, 90),					color.new(co_zeLag_EMA, 70))
// fill(plot_zeLag_ZLMA, plot_zeLag_EMA, iZeLag_ZLMA, iZeLag_EMA,							color.new(co_zeLag_ZLMA, 90),					color.new(co_zeLag_EMA, 60))

// // Plot shapes for up and down signals
// plotshape(showZeLag_trend and zeLag_signal_buy ? iZeLag_ZLMA : na,
// 		  title							= '',
// 		  style							= shape.diamond,
// 		  location						= location.absolute,
// 		  color							= co_zeLag_buy,
// 		  size							= size.tiny,
// 		  force_overlay					= true)

// plotshape(showZeLag_trend and zeLag_signal_sell ? iZeLag_ZLMA : na,
// 		  title							= '',
// 		  style							= shape.diamond,
// 		  location						= location.absolute,
// 		  color							= co_zeLag_sell,
// 		  size							= size.tiny,
// 		  force_overlay					= true)

//	testing variables
if barstate.islast and showZeLag_trend
	label.delete(
		 label.new(bar_index + 10, iZeLag_ZLMA, 
		//  label.new(bar_index + 10, high, 
		 'Compra: ' + str.tostring(iZeLag_ZLMA, format.mintick) + '\n' +
		 'Venta: ' + str.tostring(iZeLag_EMA, format.mintick),
		 color							= color.new(co_zeLag_signal, 50),
		 style							= label.style_label_left, 
		 textcolor						= co_zeLag_text_dark,
		 force_overlay					= true
		 )[1])


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║	Volumatic VIDYA				║
/// ║	@	Allen	㔬				║
/// ║	©	BigBeluga				║
/// ╚═══════════════════════════════╝

/// ＩＮＰＵＴＳ ――――――――――――――――――――――――――――

// Define colors for up and down trends
col_vVidya_uptrend						= _co_gbl_up
col_vVidya_downtrend					= _co_gbl_dn
col_vVidya_txt							= _co_gbl_white

show_vVidya_shadow						= input.bool(true,					title = "Shadow",		group = "Color",		inline = "vidya vars")

vVidya_length							= input.int(defval = 10,			title = "Longitud")
vVidya_momentum							= input.int(defval = 20,			title = "Momentum")
vVidya_band_distance					= input.float(defval = 2,			title = "Factor de distancia entre bandas",		step = 0.1)

// Define pivot
int		vVidya_pivot_leftbars			= 3
int		vVidya_pivot_rightbars			= vVidya_pivot_leftbars

float	vVidya_source					= gblSource.C

// Initialize variables for line, volume, and trend state
var		line vVidya_pivotline			= na
var		float vVidya_volumevalue		= na
float	vVidya_smoothed_value			= na
var		bool vVidya_trend_up			= na

// Initialize arrays for storing line and volume information
var	array<line> vVidya_liquid_lines_low	= array.new<line>(500)
var	array<line> vVidya_liquid_lines_high= array.new<line>(500)
var		float vVidya_volume_uptrend		= na
var		float vVidya_volume_downtrend	= na

/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――――――

// Define VIDYA (Variable Index Dynamic Average) function
Fun_vVidya_calculate(_source, _length, _momentum) =>
	float	_chg_momentum				= ta.change(_source)
	float	_sum_posmomentum			= math.sum((_chg_momentum >= 0) ? _chg_momentum : 0.0, _momentum)
	float	_sum_negmomentum			= math.sum((_chg_momentum >= 0) ? 0.0 : -_chg_momentum, _momentum)
	float	_abs_cmo					= math.abs(100 * (_sum_posmomentum - _sum_negmomentum) / (_sum_posmomentum + _sum_negmomentum))
	float	_alpha						= 2 / (_length + 1)
	var	float	_vidya_value			= 0.0
	_vidya_value						:= _alpha * _abs_cmo / 100 * _source + (1 - _alpha * _abs_cmo / 100) * nz(_vidya_value[1])

	ta.sma(_vidya_value, 15)

// Method to extend lines and add labels for liquidity levels
method Fun_vVidya_extend_liquidity_lines(array<line> _line_array, _price_level, _cross, _volume) =>
	if _line_array.size() > 0 and last_bar_index - bar_index < 5000
		for i = 0 to _line_array.size() - 1 
			if i < _line_array.size()
				line	_liquidity_line	= _line_array.get(i)
				float	_current_line_level= line.get_y2(_liquidity_line)
				bool	_price_cross	= _cross 
								  ? _price_level < _current_line_level and _price_level[1] >= _current_line_level 
								  : _price_level > _current_line_level and _price_level[1] <= _current_line_level

				bool	_is_short_line	= bar_index - line.get_x1(_liquidity_line) < 50

				if _price_cross and _is_short_line
					line.set_x2(_liquidity_line, bar_index)
					_line_array.remove(i)

					// Add volume label to the liquidity zone
					label.new(bar_index-1, _price_level[1], 
							 str.tostring(_volume, format.volume), 
							 color		= color.rgb(0, 0, 0, 99), 
							 style		= _cross ? label.style_label_lower_left : label.style_label_upper_left,
							 textcolor	= color.new(col_vVidya_txt, 30), 
							 size		= size.small,
							 force_overlay	= true
							 )

					// Add a circle label to represent liquidity zone
					label.new(bar_index-1, _price_level[1], 
							 text		= "◉", 
							 color		= #00000003, 
							 textcolor	= _cross ? col_vVidya_downtrend : col_vVidya_uptrend, 
							 style		= label.style_label_center, 
							 size		= size.normal,
							 force_overlay	= true
							 )

/// ＣＡＬＣＵＬＡＴＩＯＮＳ ――――――――――――――――

// Calculate the Average True Range (ATR)
float	vVi_ATR_value					= ta.atr(200)

// Calculate the VIDYA (Variable Index Dynamic Average)
vidya_value = Fun_vVidya_calculate(vVidya_source, vVidya_length, vVidya_momentum)

// Calculate upper and lower bands based on VIDYA and ATR
float	vVi_upper_band					= vidya_value + vVi_ATR_value * vVidya_band_distance
float	vVi_lower_band					= vidya_value - vVi_ATR_value * vVidya_band_distance

// Detect trend direction using crossovers of source with bands
if ta.crossover(vVidya_source, vVi_upper_band)
	vVidya_trend_up						:= true 
if ta.crossunder(vVidya_source, vVi_lower_band)
	vVidya_trend_up						:= false 

// Set trend-based smoothing variable
if vVidya_trend_up
	vVidya_smoothed_value				:= vVi_lower_band
if not vVidya_trend_up
	vVidya_smoothed_value				:= vVi_upper_band
if ta.change(vVidya_trend_up)
	vVidya_smoothed_value				:= na

// Calculate pivot highs and lows for price action
float	vVi_pivot_high					= ta.pivothigh(vVidya_pivot_leftbars, vVidya_pivot_rightbars)
float	vVi_pivot_low					= ta.pivotlow(close, vVidya_pivot_leftbars, vVidya_pivot_rightbars)

// Create and store lines for pivot lows (support zones)
if low[vVidya_pivot_rightbars] > vVidya_smoothed_value and vVi_pivot_low 
	vVidya_pivotline					:= line.new(
		  bar_index[vVidya_pivot_rightbars], 
		  low[vVidya_pivot_rightbars], 
		  bar_index[vVidya_pivot_rightbars]+5, 
		  low[vVidya_pivot_rightbars], 
		  color							= color.new(col_vVidya_uptrend, 50),
		  force_overlay					= true
		  )

	vVidya_liquid_lines_low.push(vVidya_pivotline)
	vVidya_volumevalue					:= math.sum(volume, vVidya_pivot_rightbars + vVidya_pivot_leftbars) / (vVidya_pivot_rightbars + vVidya_pivot_leftbars)

// Create and store lines for pivot highs (resistance zones)
if high[vVidya_pivot_rightbars] < vVidya_smoothed_value and vVi_pivot_high 
	vVidya_pivotline					:= line.new(
		  bar_index[vVidya_pivot_rightbars], 
		  high[vVidya_pivot_rightbars], 
		  bar_index[vVidya_pivot_rightbars]+5, 
		  high[vVidya_pivot_rightbars],
		  color							= color.new(col_vVidya_downtrend, 50),
		  force_overlay					= true
		  )

	vVidya_liquid_lines_high.push(vVidya_pivotline)
	vVidya_volumevalue					:= math.sum(-volume, vVidya_pivot_rightbars + vVidya_pivot_leftbars) / (vVidya_pivot_rightbars + vVidya_pivot_leftbars)

// Extend lines to track price movements
vVidya_liquid_lines_high.Fun_vVidya_extend_liquidity_lines(vVidya_smoothed_value, true, vVidya_volumevalue)
vVidya_liquid_lines_low.Fun_vVidya_extend_liquidity_lines(vVidya_smoothed_value, false, vVidya_volumevalue)

// Detect changes in the trend direction
bool vVi_trend_cross_up					= not vVidya_trend_up[1] and vVidya_trend_up
bool vVi_trend_cross_down				= not vVidya_trend_up and vVidya_trend_up[1]

// Reset volume counters when trend changes
if ta.change(vVi_trend_cross_up) or ta.change(vVi_trend_cross_down)
	vVidya_volume_uptrend				:= 0
	vVidya_volume_downtrend				:= 0

// Accumulate volume during trends
if not(ta.change(vVi_trend_cross_up) or ta.change(vVi_trend_cross_down))
	vVidya_volume_uptrend				+= (close > open ? volume : 0)
	vVidya_volume_downtrend				+= (close < open ? volume : 0)

// Calculate average volume
float vVidya_avg_volume_delta			= (vVidya_volume_uptrend + vVidya_volume_downtrend) / 2

// Calculate delta volume percentage
string vVidya_delta_volume = 
		  str.tostring(((vVidya_volume_uptrend - vVidya_volume_downtrend) / vVidya_avg_volume_delta) * 100, format.percent) == "NaN%" 
		  ? "0%" 
		  : str.tostring(((vVidya_volume_uptrend - vVidya_volume_downtrend) / vVidya_avg_volume_delta) * 100, format.percent)

/// ＰＬＯＴ ――――――――――――――――――――――――――――――

_fvVi_show								= show_vVidya_shadow
_fvVi_opacity							= 60
_fvVi_opacity_none						= 100
_fvVi_line_width						= 2
_fvVi_line_style						= plot.style_linebr

// Determine the color of the trend
_fvVi_color_conditional					= vVidya_trend_up ? col_vVidya_uptrend : not vVidya_trend_up ? col_vVidya_downtrend : chart.fg_color

_fvVi_value_up							= vVidya_smoothed_value
_fvVi_value_dn							= hl2

// Plot the VIDYA trend line
_fvVi_plot_up							= plot(_fvVi_value_up,
		  color							= _fvVi_color_conditional,
		  linewidth						= _fvVi_line_width,
		  style							= _fvVi_line_style,
		  force_overlay					= true)

_fvVi_plot_dn							= plot(_fvVi_value_dn,
		  display						= display.none,
		  force_overlay					= true)

// Fill between the plot and the VIDYA line
fill(_fvVi_plot_up, _fvVi_plot_dn,
		  _fvVi_value_up,
		  _fvVi_value_dn,
		  color.new(_fvVi_color_conditional, _fvVi_show ? _fvVi_opacity : _fvVi_opacity_none),
		  na
		  )

// Display labels for volume and trend statistics on the last bar
if barstate.islast
	label.delete(
		 label.new(bar_index + 10, vVidya_smoothed_value, 
		 "Compra: " + str.tostring(vVidya_volume_uptrend, format.volume) + "\n" +
		 "Venta: " + str.tostring(vVidya_volume_downtrend, format.volume) + "\n" +
		 "Delta: " + vVidya_delta_volume, 
		 color							= color.new(_fvVi_color_conditional, 90),
		 style							= label.style_label_left, 
		 textcolor						= _co_gbl_white,
		 force_overlay					= true
		 )[1])
	
	label.delete(
		 label.new(bar_index, vVidya_smoothed_value, 
				 text					= "✪", 
				 color					= #00000003,
				 textcolor				= _fvVi_color_conditional, 
				 style					= label.style_label_center, 
				 size					= size.large,
				 force_overlay			= true
				 )[1])

// // Plot trend change markers (up and down arrows)
// plotshape(
// 		 series							= vVi_trend_cross_up[1] ? vVidya_smoothed_value[0] : na, 
// 		 title							= "Trend Buy", 
// 		 style							= shape.labelup, 
// 		 location						= location.absolute, 
// 		 color							= color.new(col_vVidya_uptrend, 90), 
// 		 text							= " ▲ ", 
// 		 textcolor						= col_vVidya_uptrend,
// 		 force_overlay					= true
// 		 )

// plotshape(
// 		 series							= vVi_trend_cross_down[1] ? vVidya_smoothed_value[0] : na, 
// 		 title							= "Trend Sell", 
// 		 style							= shape.labeldown, 
// 		 location						= location.absolute, 
// 		 color							= color.new(col_vVidya_downtrend, 90), 
// 		 text							= " ▼ ", 
// 		 textcolor						= col_vVidya_downtrend,
// 		 force_overlay					= true
// 		 )


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║	Fx Market Sessions			║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── FxMSs ───
/// ─── Cont ───
//// ───────────────────────

fxMrkSsGroupGral						= 'General'
fxMrkSsGroupSyd							= 'Sesión Sydney'
fxMrkSsGroupTyo							= 'Sesión Tokyo'
fxMrkSsGroupLon							= 'Sesión Londres'
fxMrkSsGroupNewY						= 'Sesión New York'
fxMrkSsGroupBox							= 'Box'
fxMrkSsGroupTag							= 'Etiquetas'
fxMrkSsGroupRng							= 'Rango Abierto'
fxMrkSsGroupOsc							= 'Oscilador'
fxMrkSsGroupFibo						= 'Niveles Fibonacci'
fxMrkSsGroupOpc							= 'Opciones'
fxMrkSsGroupBar							= 'Vela'
fxMrkSsGroupAlrt						= 'Alertas Visuales'
fxMrkSsGroupInf							= 'Información'
fxMrkSsGroupLine						= 'Box'

vFxMkSs_Show							= true
vFxMkSs_Yes								= 'Si'
vFxMkSs_No								= 'No'
vFxMkSs_Extend							= 'Extendido'
vfxMkSs_Hide							= 'Hide'
tooltipFfxMkSs_TimeZ					= "Mas opciones de zonas horarias, por ej: 'GMT-4', 'GMT-3', 'GMT-2', 'GMT-1', \n 'GMT', 'GMT+1', 'GMT+2', 'GMT+3', 'GMT+4'"

vFxMkSs_LondonColor						= _co_gbl_sky
vFxMkSs_NewYorkColor					= _co_gbl_mint
vFxMkSs_TokyoColor						= _co_gbl_pink
vFxMkSs_SydneyColor						= _co_gbl_yellow

vFxMkSs_KillLonColor					= _co_gbl_sky
vFxMkSs_KillNwYColor					= _co_gbl_mint
// vFxMkSs_KillTykColor					= _co_gbl_pink
// vFxMkSs_KillSydColor					= _co_gbl_yellow

vFxMkSs_NoneColor						= _co_gbl_black

//// ───────────────────────
/// ─── FxMSs ───
/// ─── Inputs ───
//// ───────────────────────

/// ─── Timezone
// optFxMkSs_TimeZone						= input.string	(defval = 'New York',	title = 'Timezone',											group = fxMrkSsGroupGral,			tooltip = tooltipFfxMkSs_TimeZ ,
optFxMkSs_TimeZone						= input.string	(defval = 'New York',	title = 'Timezone',											group = fxMrkSsGroupGral,			tooltip = tooltipFfxMkSs_TimeZ ,
		  options						= 				['New York', 'Chicago', 'NYSE', 'Londres', 'Tokyo', 'Sydney', 'Argentina'])
showFxMkSs_History						= input.string	(defval = vFxMkSs_Yes,	title = 'Historico',										group = fxMrkSsGroupGral,			options = [vFxMkSs_Yes, vFxMkSs_No]) == vFxMkSs_Yes
vFxMkSs_Lookback						= 12 * 60

/// ─── Sessions

/// ─── London
showFxMkSs_SessLon						= input.bool	(true,					title = 'Londres  ',										group = fxMrkSsGroupLon,			inline = 'session1_1') and vFxMkSs_Show
vFxMkSs_SessLnLabel						= input.string	('Londres',				title = ' ',												group = fxMrkSsGroupLon,			inline = 'session1_1')
vFxMkSs_SessLnColor						= input.color	(vFxMkSs_LondonColor,	title = ' ',												group = fxMrkSsGroupLon,			inline = 'session1_1')
vFxMkSs_SessLnTimeZ						= input.session	('0300-1200',			title = 'Periodo',											group = fxMrkSsGroupLon)
vFxMkSs_SessLnExtend					= input.string	(vFxMkSs_No,			title = 'Extender',											group = fxMrkSsGroupLon,
		  options						= [vFxMkSs_No, vFxMkSs_Extend])

/// Killzones London
showFxMkSs_KillLonOpen					= input.bool	(true,					title = 'KillZone Open',									group = fxMrkSsGroupLon,			inline = 'KillLonOpen')
vFxMkSs_KillLonTimeOpen					= input.session	('0400-0500',			title = ' ',												group = fxMrkSsGroupLon,			inline = 'KillLonOpen')
showFxMkSs_KillLonRally					= input.bool	(true,					title = 'KillZone Rally',									group = fxMrkSsGroupLon,			inline = 'KillLonRally')
vFxMkSs_KillLonTimeRally				= input.session	('0600-0645',			title = ' ',												group = fxMrkSsGroupLon,			inline = 'KillLonRally')
showFxMkSs_KillLonClose					= input.bool	(true,					title = 'KillZone Close',									group = fxMrkSsGroupLon,			inline = 'KillLonClose')
vFxMkSs_KillLonTimeClose				= input.session	('1115-1200',			title = ' ',												group = fxMrkSsGroupLon,			inline = 'KillLonClose')

/// ─── New York
showFxMkSs_SessNy						= input.bool	(true,					title = 'New York  ',										group = fxMrkSsGroupNewY,			inline = 'session2_1') and vFxMkSs_Show
vFxMkSs_SessNyLabel						= input.string	('New York',			title = ' ',												group = fxMrkSsGroupNewY,			inline = 'session2_1')
vFxMkSs_SessNyColor						= input.color	(vFxMkSs_NewYorkColor,	title = ' ',												group = fxMrkSsGroupNewY,			inline = 'session2_1')
vFxMkSs_SessNyTimeZ						= input.session	('0800-1700',			title = 'Periodo',											group = fxMrkSsGroupNewY)
vFxMkSs_SessNyExtend					= input.string	(vFxMkSs_No,			title = 'Extender',											group = fxMrkSsGroupNewY,
		  options						= [vFxMkSs_No, vFxMkSs_Extend])

/// Killzones New York
showFxMkSs_KillNwYOpen					= input.bool	(true,					title = 'KillZone Open',									group = fxMrkSsGroupNewY,			inline = 'KillNwYOpen')
vFxMkSs_KillNwYTimeOpen					= input.session	('0730-0845',			title = ' ',												group = fxMrkSsGroupNewY,			inline = 'KillNwYOpen')
showFxMkSs_KillNwYRally					= input.bool	(true,					title = 'KillZone Rally',									group = fxMrkSsGroupNewY,			inline = 'KillNwYRally')
vFxMkSs_KillNwYTimeRally				= input.session	('1000-1045',			title = ' ',												group = fxMrkSsGroupNewY,			inline = 'KillNwYRally')
showFxMkSs_KillNwYClose					= input.bool	(true,					title = 'KillZone Close',									group = fxMrkSsGroupNewY,			inline = 'KillNwYClose')
vFxMkSs_KillNwYTimeClose				= input.session	('1230-1315',			title = ' ',												group = fxMrkSsGroupNewY,			inline = 'KillNwYClose')

/// ─── Tokyo
showFxMkSs_SessTk						= input.bool	(true,					title = 'Tokyo   ',											group = fxMrkSsGroupTyo,			inline = 'session3_1') and vFxMkSs_Show
vFxMkSs_SessTkLabel						= input.string	('Tokyo',				title = ' ',												group = fxMrkSsGroupTyo,			inline = 'session3_1')
vFxMkSs_SessTkColor						= input.color	(vFxMkSs_TokyoColor,	title = ' ',												group = fxMrkSsGroupTyo,			inline = 'session3_1')
vFxMkSs_SessTkTimeZ						= input.session	('1800-0300',			title = 'Periodo',											group = fxMrkSsGroupTyo)
vFxMkSs_SessTkExtend					= input.string	(vFxMkSs_No,			title = 'Extender',											group = fxMrkSsGroupTyo,
		  options						= [vFxMkSs_No, vFxMkSs_Extend])

/// ─── Sydney
showFxMkSs_SessSyd						= input.bool	(false,					title = 'Sydney  ',											group = fxMrkSsGroupSyd,			inline = 'session4_1') and vFxMkSs_Show
vFxMkSs_SessSdLabel						= input.string	('Sydney',				title = ' ',												group = fxMrkSsGroupSyd,			inline = 'session4_1')
vFxMkSs_SessSdColor						= input.color	(vFxMkSs_SydneyColor,	title = ' ',												group = fxMrkSsGroupSyd,			inline = 'session4_1')
vFxMkSs_SessSdTimeZ						= input.session	('1600-0100',			title = 'Periodo',											group = fxMrkSsGroupSyd)
vFxMkSs_SessSdExtend					= input.string	(vFxMkSs_No,			title = 'Extender',											group = fxMrkSsGroupSyd,
		  options						= [vFxMkSs_No, vFxMkSs_Extend])

/// ─── Show & Styles
optFxMkSs_LineStyle						= input.string	('····',				title = 'Box style', 										group = fxMrkSsGroupLine,
		  options						= 				['⎯⎯⎯⎯', '----', '····'])
vFxMkSs_BorderWidth						= input.int		(1,						title = 'Ancho de Linea',	minval = 0,						group = fxMrkSsGroupLine)
vFxMkSs_BgOpacity						= input.int		(92,					title = 'Transp fondo', minval = 0,maxval = 100,step = 1,	group = fxMrkSsGroupLine,			tooltip = 'Setting the 100 is no background color')
vFxMkSs_LineOpacity						= input.int		(40,					title = 'Transp contorno',minval = 0,maxval = 100,step = 1,	group = fxMrkSsGroupLine,			tooltip = 'Setting the 100 is no background color')

/// ─── Labels
showFxMkSs_Labels						= input.bool	(true,					title = 'Información',										group = fxMrkSsGroupTag,			inline = 'label_show') and vFxMkSs_Show
optFxMkSs_LabelSize						= input.string	('Pequeño',				title = '',													group = fxMrkSsGroupTag,			inline = 'label_show',
		  options						= 				['Auto', 'Mini', 'Pequeño', 'Normal', 'Grande', 'Enorme'])
optFxMkSs_LabelPositionY				= input.string	('Arriba',				title = '',													group = fxMrkSsGroupTag,			inline = 'label_loc',
		  options						= 				['Arriba', 'Abajo'])
optFxMkSs_LabelPositionIn				= input.string	('Externo',				title = '',													group = fxMrkSsGroupTag,			inline = 'label_loc',
		  options						= 				['Interno', 'Externo'])

/// ─── Info
showFxMkSs_LabelName					= input.bool	(true,					title = 'Sesión',											group = fxMrkSsGroupTag,			inline = 'label_format')
showFxMkSs_LabelDay						= input.bool	(true,					title = 'Dia',												group = fxMrkSsGroupTag,			inline = 'label_format')
showFxMkSs_LabelPrice					= input.bool	(false,					title = 'Precio',											group = fxMrkSsGroupTag,			inline = 'label_format')
showFxMkSs_LabelPips					= input.bool	(true,					title = 'Pips',												group = fxMrkSsGroupTag,			inline = 'label_format')

vFxMkSsPips								= syminfo.mintick * 10
vFxMkSs_MaxBars							= 500

vFxMkSs_FmtPrice						= '{0,number,#.#####}'
vFxMkSs_FmtPips							= '{0,number,#.#}'
vFxMkSs_IconSeparator					= ' • '
vFxMkSs_IsWeekends						= dayofweek == 7 or dayofweek == 1

optFxMkSs_LineKillzone					= '⎯⎯⎯⎯'

//// ───────────────────────
/// ─── FxMSs ───
/// ─── Functions ───
//// ───────────────────────

FunFxMkSs_GetPeriod(_session, _start, _lookback) =>
	_result								= math.max(_start, 1)
	for i 								= _result to _lookback
		if na(_session[i+1])			and _session[i]
			_result						:= i+1
			break
	_result

FunFxMkSs_GetStarted(_session) => na(_session[1]) and _session

FunFxMkSs_GetEnded(_session) => na(_session) and _session[1]

FunFxMkSs_GetLabelPosition(_y, _side) =>
	switch _y
		'top'							=> _side == 'outside' ? label.style_label_lower_left : label.style_label_upper_left
		'bottom'						=> _side == 'outside' ? label.style_label_upper_left : label.style_label_lower_left

vFxMkSs_LabelPosition					= FunFxMkSs_GetLabelPosition(FunGlobalVertical(optFxMkSs_LabelPositionY), FunGlobalPositionIn(optFxMkSs_LabelPositionIn))

/// ─── Labels
FunFxMkSs_RenderLabel(_show, _session, _is_started, _color, _top, _bottom, _text, _delete_history) =>
	var label my_label					= na
	var int start_time					= na

	v_position_y						= (FunGlobalVertical(optFxMkSs_LabelPositionY) == 'top') ? _top : _bottom
	v_label								= array.new_string()
	v_chg								= _top - _bottom
	
	if _is_started
		start_time						:= time
	
	if showFxMkSs_LabelName and not na(_text)
		array.push(v_label, _text)

	/// day
	if showFxMkSs_LabelDay
		array.push(v_label, FunGlobalDayofWeek(dayofweek(start_time, FunGlobalTimeZone(optFxMkSs_TimeZone))))

	/// price
	if showFxMkSs_LabelPrice
		array.push(v_label, str.format(vFxMkSs_FmtPrice, v_chg))

	/// pip
	if showFxMkSs_LabelPips
		array.push(v_label, str.format(vFxMkSs_FmtPips, v_chg / vFxMkSsPips) + ' pips')

	if _show
		if _is_started
			my_label					:= label.new(time, v_position_y, array.join(v_label, vFxMkSs_IconSeparator),
				  textcolor				= color.new(_color, vFxMkSs_LineOpacity),
				  color					= color.new(vFxMkSs_NoneColor, 100),
				  size					= FunGlobalTextSize(optFxMkSs_LabelSize),
				  style					= vFxMkSs_LabelPosition,
				  xloc					= xloc.bar_time,
				  force_overlay			= true)
			
			if _delete_history
				label.delete(my_label[1])

		if _session
			label.set_y(my_label, v_position_y)
			label.set_text(my_label, array.join(v_label, vFxMkSs_IconSeparator))

/// ─── Markets ───
FunFxMkSs_RenderSession(_show, _session, _is_started, _is_ended, _color, _top, _bottom, _extend, _is_extend, _delete_history) =>
	var box my_box						= na

	x0_1								= ta.valuewhen(na(_session[1])	and _session,		bar_index, 1)
	x0_2								= ta.valuewhen(na(_session)		and _session[1],	bar_index, 0)
	var x1								= 0
	var x2								= 0
	var session_open					= 0.0
	var session_high					= 0.0
	var session_low						= 0.0

	if _show
		if _is_started
			diff						= math.abs(x0_2 - x0_1)
			x1							:= bar_index
			x2							:= bar_index + (math.min(diff, vFxMkSs_MaxBars))
			my_box						:= box.new(x1, _top, x2, _bottom,
				  border_color			= color.new(_color, vFxMkSs_LineOpacity),
				  border_width			= vFxMkSs_BorderWidth,
				  border_style			= FunGlobalLineStyle(optFxMkSs_LineStyle),
				  bgcolor				= color.new(_color, vFxMkSs_BgOpacity),
				  force_overlay			= true)

			session_open				:= open
			session_high				:= _top
			session_low					:= _bottom

			if _is_extend
				box.set_extend(my_box, extend.right)

			if _delete_history
				box.delete(my_box[1])

		else if _session
			box.set_top(my_box, _top)
			box.set_bottom(my_box, _bottom)

			session_high				:= _top
			session_low					:= _bottom
		
		else if _is_ended
			session_open				:= na
			box.set_right(my_box, bar_index)

	[x1, x2, session_open, session_high, session_low]

/// ─── Boxes
FunFxMkSs_DrawBox(_show, _session, _color, _label, _extend, _lookback) =>
	_max								= FunFxMkSs_GetPeriod(_session, 1, _lookback)
	_top								= ta.highest(high, _max)
	_bottom								= ta.lowest(low, _max)
	
	_is_started							= FunFxMkSs_GetStarted(_session)
	_is_ended							= FunFxMkSs_GetEnded(_session)
	_is_extend							= _extend != vFxMkSs_No

	delete_history						= (not showFxMkSs_History) or _is_extend

	[x1, x2, _open, _high, _low]		= FunFxMkSs_RenderSession(_show, _session, _is_started, _is_ended, _color, _top, _bottom, _extend, _is_extend, delete_history)

	if showFxMkSs_Labels
		FunFxMkSs_RenderLabel(_show, _session, _is_started, _color, _top, _bottom, _label, delete_history)

	[_session, _open, _high, _low]

/// ─── Killzones
FunFxMkSs_RenderKillZones(_on, _color) =>

	var int Bar							= 0
	var float High						= 0.0 
	var float Low						= 0.0
	var box BoX							= na
	var label LabeL						= na 

	if  (_on[1] == 0 and _on == 1)
		Bar								:= bar_index
		High							:= high
		Low								:= low

	else if (_on[1] == 1 and _on == 1)
		High							:= math.max(high , High) 
		Low								:= math.min(low , Low)

	else if _on == 0
		High							:= 0.0 
		Low								:= 0.0
		Bar								:= 0

	if _on > _on[1]
		BoX								:= box.new(bar_index, High, bar_index, Low,
		  bgcolor						= color.new(_color, 80),
		  border_color					= color.new(_color, 90),
		  border_width					= 1,
		  border_style					= FunGlobalLineStyle(optFxMkSs_LineKillzone),
		  force_overlay					= true)

	if _on and _on == _on[1]
		box.set_top(BoX, High)
		box.set_bottom(BoX, Low)
		box.set_right(BoX, bar_index)
		label.set_x(LabeL,math.round(math.avg(Bar,bar_index)))
		label.set_y(LabeL, High)

	[High , Low ]

//// ───────────────────────
/// ─── FxMSs ───
/// ─── Instances ───
//// ───────────────────────

/// ─── Timeframe
string ms_timeZone						= (FunGlobalTimeZone(optFxMkSs_TimeZone) == vFxMkSs_No or FunGlobalTimeZone(optFxMkSs_TimeZone) == '') ? na : FunGlobalTimeZone(optFxMkSs_TimeZone)

/// ─── Timeframe London
int timeMkSs_SessLon					= time(timeframe.period, vFxMkSs_SessLnTimeZ, ms_timeZone)

timeMkSs_KillLonOpen					= time(timeframe.period,	vFxMkSs_KillLonTimeOpen,	FunGlobalTimeZone(optFxMkSs_TimeZone))
timeMkSs_KillLonRally					= time(timeframe.period,	vFxMkSs_KillLonTimeRally,	FunGlobalTimeZone(optFxMkSs_TimeZone))
timeMkSs_KillLonClose					= time(timeframe.period,	vFxMkSs_KillLonTimeClose,	FunGlobalTimeZone(optFxMkSs_TimeZone))

/// ─── Timeframe New York
int timeMkSs_SessNewY					= time(timeframe.period, vFxMkSs_SessNyTimeZ, ms_timeZone)

timeMkSs_KillNwYOpen					= time(timeframe.period,	vFxMkSs_KillNwYTimeOpen,	FunGlobalTimeZone(optFxMkSs_TimeZone))
timeMkSs_KillNwYRally					= time(timeframe.period,	vFxMkSs_KillNwYTimeRally,	FunGlobalTimeZone(optFxMkSs_TimeZone))
timeMkSs_KillNwYClose					= time(timeframe.period,	vFxMkSs_KillNwYTimeClose,	FunGlobalTimeZone(optFxMkSs_TimeZone))

/// ─── Timeframe Tokyo
int timeMkSs_SessTyk					= time(timeframe.period, vFxMkSs_SessTkTimeZ, ms_timeZone)

/// ─── Timeframe Sydney
int timeMkSs_SessSyd					= time(timeframe.period, vFxMkSs_SessSdTimeZ, ms_timeZone)

//// ───────────────────────
/// ─── FxMSs ───
/// ─── Drawing ───
//// ───────────────────────

/// ─── Session London
[DRAWMkSsSessLon,		DwMkSsSessLon_Open,		DwMkSsSessLon_High,		DwMkSsSessLon_Low]				= FunFxMkSs_DrawBox(showFxMkSs_SessLon,	timeMkSs_SessLon,	vFxMkSs_SessLnColor,	vFxMkSs_SessLnLabel,	vFxMkSs_SessLnExtend,	vFxMkSs_Lookback)
/// ─── Session New York
[DRAWMkSsSessNewY,		DwMkSsSessNewY_Open,	DwMkSsSessNewY_High,	DwMkSsSessNewY_Low]				= FunFxMkSs_DrawBox(showFxMkSs_SessNy,	timeMkSs_SessNewY,	vFxMkSs_SessNyColor,	vFxMkSs_SessNyLabel,	vFxMkSs_SessNyExtend,	vFxMkSs_Lookback)
/// ─── Session Tokyo
[DRAWMkSsSessTyk,		DwMkSsSessTyk_Open,		DwMkSsSessTyk_High,		DwMkSsSessTyk_Low]				= FunFxMkSs_DrawBox(showFxMkSs_SessTk,	timeMkSs_SessTyk,	vFxMkSs_SessTkColor,	vFxMkSs_SessTkLabel,	vFxMkSs_SessTkExtend,	vFxMkSs_Lookback)
/// ─── Session Sydney
[DRAWMkSsSessSyd,		DwMkSsSessSyd_Open,		DwMkSsSessSyd_High,		DwMkSsSessSyd_Low]				= FunFxMkSs_DrawBox(showFxMkSs_SessSyd,	timeMkSs_SessSyd,	vFxMkSs_SessSdColor,	vFxMkSs_SessSdLabel,	vFxMkSs_SessSdExtend,	vFxMkSs_Lookback)

/// ─── KillZones London
if showFxMkSs_KillLonOpen
	[DwMkSs_KillLon_Open, DwMkSs_KillLon_Op]		= FunFxMkSs_RenderKillZones(timeMkSs_KillLonOpen,	vFxMkSs_KillLonColor)
if showFxMkSs_KillLonRally
	[DwMkSs_KillLon_Rally, DwMkSs_KillLon_Rl]		= FunFxMkSs_RenderKillZones(timeMkSs_KillLonRally,	vFxMkSs_KillLonColor)
if showFxMkSs_KillLonClose
	[DwMkSs_KillLon_Close, DwMkSs_KillLon_Cl]		= FunFxMkSs_RenderKillZones(timeMkSs_KillLonClose,	vFxMkSs_KillLonColor)

/// ─── KillZones New York
if showFxMkSs_KillNwYOpen
	[DwMkSs_KillNwY_Open, DwMkSs_KillNwY_Op]		= FunFxMkSs_RenderKillZones(timeMkSs_KillNwYOpen,	vFxMkSs_KillNwYColor)
if showFxMkSs_KillNwYRally
	[DwMkSs_KillNwY_Rally, DwMkSs_KillNwY_Rl]		= FunFxMkSs_RenderKillZones(timeMkSs_KillNwYRally,	vFxMkSs_KillNwYColor)
if showFxMkSs_KillNwYClose
	[DwMkSs_KillNwY_Close, DwMkSs_KillNwY_Cl]		= FunFxMkSs_RenderKillZones(timeMkSs_KillNwYClose,	vFxMkSs_KillNwYColor)

// /// ─── Drawing Table Sessions
// if showTsiObsPnlTimeframesPanel
// 	FunTsiObsPnlCalculateCellName				(0,	0,		'Sessions')
// 	FunSessionCellTime							(1,	0,		'Status')
// 	FunSessionCellTime							(2,	0,		'Open ')				//	(2,	0,		'Time')
// 	FunSessionCellTime							(3,	0,		'Close ')
// 	FunSessionCellTime							(4,	0,		'Killzones ')

// 	if showSessionPanelLondon
// 		FunSessionCellName						(0,	1,		'London')
// 		FunSessionCellTimeActive				(1,	1,		'O/C')
// 		FunSessionCellTimeOpen					(2,	1,		'03:00')				//	(2,	1,		'03:00 12:00')
// 		FunSessionCellTimeClose					(3,	1,		'12:00')
// 		FunSessionCellTimeKillzones				(4,	1,		'Killzones')

// 	if showSessionPanelNewYork
// 		FunSessionCellName						(0,	2,		'New York')
// 		FunSessionCellTimeActive				(1,	2,		'O/C')
// 		FunSessionCellTimeOpen					(2, 2,		'08:00')				//	(2,	2,		'08:00 17:00')
// 		FunSessionCellTimeClose					(3, 2,		'17:00')
// 		FunSessionCellTimeKillzones				(4,	2,		'Killzones')

// 	if showSessionPanelSydney
// 		FunSessionCellName						(0,	3,		'Sydney')
// 		FunSessionCellTimeActive				(1,	3,		'O/C')
// 		FunSessionCellTimeOpen					(2,	3,		'16:00')				//	(2,	3,		'16:00 01:00')
// 		FunSessionCellTimeClose					(3,	3,		'01:00')
// 		FunSessionCellTimeKillzones				(4,	3,		'Killzones')

// 	if showSessionPanelTokyo
// 		FunSessionCellName						(0,	4,		'Tokyo')
// 		FunSessionCellTimeActive				(1,	4,		'O/C')
// 		FunSessionCellTimeOpen					(2,	4,		'19:00')				//	(2,	4,		'19:00 03:00')
// 		FunSessionCellTimeClose					(3,	4,		'03:00')
// 		FunSessionCellTimeKillzones				(4,	4,		'Killzones')


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║ 	Market Structure Oscilador	║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Variables ──
//// ───────────────────────

co_msOscBuy								= _co_gbl_buy
co_msOscSell							= _co_gbl_sell
co_msOscLong							= _co_gbl_buy
co_msOscShort							= _co_gbl_sell

co_msOscRange							= _co_gbl_white
msOscilColorOsc							= _co_gbl_white
msOscilColorMid							= _co_gbl_white

display									= display.all - display.status_line	

msOsc_VarsGroup							= 'Oscilador Market Structure'
msOsc_WeightK1							= input.float	(defval = 1,					title = '  Escala Corta',					minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_WeightK2							= input.float	(defval = 3,					title = '  Escala Intermedia',				minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_WeightK3							= input.float	(defval = 2,					title = '  Escala Larga',					minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_Norm_Smooth						= input.int		(defval = 4,					title = '  Oscilador Suavizado',			minval = 1,			group = msOsc_VarsGroup,					display = display)

msOsc_Group								= 'Oscilador Gradiente'
msOsc_Show								= input			(defval = true,					title = 'Oscilador Cycle - Gradiente',							group = msOsc_Group)

cyc_Group								= 'Oscilador Cycle'
cycleOpt								= input			(defval = false,				title = 'Oscilador Cycle - Histograma',							group = cyc_Group)
cyc_Smooth								= input.int		(defval = 7,					title = '  Cycle Marca Longitud',			minval = 1,			group = cyc_Group,						display = display)

genericGroup							= 'Market Structure en Gráfico'
msOnChart1								= input			(defval = true,					title = 'Estructura de rango Corto',							group = genericGroup)
msOnChartK1								= input.string	(defval = '····',				title = '  Linea',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K1',	display = display)
stMSLblK1T								= input.string	(defval = 'Disabled',			title = 'Tags',			options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K1',	display = display),	stMSLblK1 = stMSLblK1T == 'Enabled'

msOnChart2								= input			(defval = true,					title = 'Estructura de rango Intermedio',						group = genericGroup)
msOnChartK2								= input.string	(defval = '----',				title = '  Linea',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K2',	display = display)
stMSLblK2T								= input.string	(defval = 'Disabled',			title = 'Tags',			options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K2',	display = display),	stMSLblK2 = stMSLblK2T == 'Enabled'

msOnChart3								= input			(defval = true,					title = 'Estructura de rango Largo', 							group = genericGroup)
msOnChartK3								= input.string	(defval = '⎯⎯⎯⎯',				title = '  Linea',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K3',	display = display)
stMSLblK3T								= input.string	(defval = 'Enabled',			title = 'Tags',			options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K3',	display = display),	stMSLblK3 = stMSLblK3T == 'Enabled'

msOscCG									= 'Rango de Oscilador'
show_msOscRange1						= input			(false,							title = 'Oscilador de rango Corto',								group = msOscCG,		inline = 'k1w')
show_msOscRange2						= input			(false,							title = 'Oscilador de rango Medio',								group = msOscCG,		inline = 'k2w')
show_msOscRange3						= input			(false,							title = 'Oscilador de rango Largo',								group = msOscCG,		inline = 'k3w')

msOscSizeBosChoch						= size.tiny

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Types ──
//// ───────────────────────

type SWINGS
	float	lastPrice
	float	midPrice
	float	prevPrice

	int		lastIndex
	int		midIndex
	int		prevIndex

	bool	isCrossed

type MS
	int		type					= 0

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Instances ──
//// ───────────────────────

var SWINGS stLow						= SWINGS.new()
var SWINGS stHigh						= SWINGS.new()
var MS stMS								= MS.new()

var SWINGS itLow						= SWINGS.new()
var SWINGS itHigh						= SWINGS.new()
var MS itMS								= MS.new()

var SWINGS ltLow						= SWINGS.new()
var SWINGS ltHigh						= SWINGS.new()
var MS ltMS								= MS.new()

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Functions ──
//// ───────────────────────

Fun_msOsc_queryPatterns(lastPrice, midPrice, prevPrice, isSwingHigh) =>
	if isSwingHigh
		prevPrice < midPrice and midPrice >= lastPrice
	else
		prevPrice > midPrice and midPrice <= lastPrice

method Fun_msOsc_queryPatterns(SWINGS this, isSwingHigh) =>
	if isSwingHigh
		this.prevPrice < this.midPrice and this.midPrice >= this.lastPrice
	else
		this.prevPrice > this.midPrice and this.midPrice <= this.lastPrice

method Fun_msOsc_updatePattern(SWINGS this, _price, _index) =>
	this.isCrossed					:= false
	this.prevPrice					:= this.midPrice, this.midPrice := this.lastPrice, this.lastPrice := _price
	this.prevIndex					:= this.midIndex, this.midIndex := this.lastIndex, this.lastIndex := _index

method Fun_msOsc_setType(MS this, value) =>
	this.type						:= value

Fun_msOsc_normalize(_buy, _sell, _smooth) =>
	var _os							= 0
	var float _max					= na
	var float _min					= na
	_os := _buy ? 1 : _sell ? -1 : _os
	
	_max := _os > _os[1] ? gblSource.C : _os < _os[1] ? _max : math.max(gblSource.C, _max)
	_min := _os < _os[1] ? gblSource.C : _os > _os[1] ? _min : math.min(gblSource.C, _min)

	ta.sma((gblSource.C - _min)/(_max - _min), _smooth) * 100

Fun_msOsc_shortMarketStructure() => 

	_bull							= false
	_bear							= false

	if Fun_msOsc_queryPatterns(gblSource.H, gblSource.H[1], gblSource.H[2], true )
		stHigh.Fun_msOsc_updatePattern(gblSource.H[1], bar_index[1])
		stHigh.isCrossed			:= false

	if gblSource.C > stHigh.lastPrice and not stHigh.isCrossed
		stHigh.isCrossed			:= true
		_bull						:= true

	if Fun_msOsc_queryPatterns(gblSource.L , gblSource.L[1] , gblSource.L[2] , false) 
		stLow.isCrossed				:= false
		stLow.Fun_msOsc_updatePattern(gblSource.L[1], bar_index[1])

	if gblSource.C < stLow.lastPrice and not stLow.isCrossed
		stLow.isCrossed				:= true
		_bear						:= true

	Fun_msOsc_normalize(_bull, _bear, msOsc_Norm_Smooth)

Fun_msOsc_marketStructure(SWINGS hSwingHigh, SWINGS hSwingLow, SWINGS lSwingHigh, SWINGS lSwingLow) => 

	_bull							= false
	_bear							= false 

	cSwingHigh						= lSwingHigh.Fun_msOsc_queryPatterns(true)

	if cSwingHigh and cSwingHigh != cSwingHigh[1]
		hSwingHigh.Fun_msOsc_updatePattern(lSwingHigh.midPrice, lSwingHigh.midIndex)
		hSwingHigh.isCrossed		:= false

	if gblSource.C > hSwingHigh.lastPrice and not hSwingHigh.isCrossed
		hSwingHigh.isCrossed		:= true
		_bull						:= true

	cSwingLow						= lSwingLow.Fun_msOsc_queryPatterns(false)

	if cSwingLow and cSwingLow != cSwingLow[1]
		hSwingLow.Fun_msOsc_updatePattern(lSwingLow.midPrice, lSwingLow.midIndex)
		hSwingLow.isCrossed			:= false

	if gblSource.C < hSwingLow.lastPrice and not hSwingLow.isCrossed
		hSwingLow.isCrossed			:= true
		_bear						:= true

	Fun_msOsc_normalize(_bull, _bear, msOsc_Norm_Smooth)

Fun_msOsc_collectData() => [Fun_msOsc_shortMarketStructure(), Fun_msOsc_marketStructure(itHigh, itLow, stHigh, stLow), Fun_msOsc_marketStructure(ltHigh, ltLow, itHigh, itLow)]

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Maths ──
//// ───────────────────────

log.info('yaz_kizim {0} {1}', ltHigh.lastPrice, ltHigh.isCrossed)

if msOnChart1
	if gblSource.C > stHigh.lastPrice and not stHigh.isCrossed

		line.new(stHigh.lastIndex, stHigh.lastPrice, gblSource.I, stHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK1),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK1
			box.new(stHigh.lastIndex, stHigh.lastPrice, gblSource.I, stHigh.lastPrice,
					  border_color		= color(na),
					  text				= stMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			stMS.Fun_msOsc_setType(1)

	if gblSource.C < stLow.lastPrice and not stLow.isCrossed

		line.new(stLow.lastIndex, stLow.lastPrice, gblSource.I, stLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK1),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK1
			box.new(stLow.lastIndex, stLow.lastPrice, gblSource.I, stLow.lastPrice,
					  border_color		= color(na),
					  text				= stMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			stMS.Fun_msOsc_setType(-1)

if msOnChart2
	if gblSource.C > itHigh.lastPrice and not itHigh.isCrossed

		line.new(itHigh.lastIndex, itHigh.lastPrice, gblSource.I, itHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK2),
					  width				= 1,
					  force_overlay		= true)
		if stMSLblK2
			box.new(itHigh.lastIndex, itHigh.lastPrice, gblSource.I, itHigh.lastPrice,
					  border_color		= color(na),
					  text				= itMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			itMS.Fun_msOsc_setType(1)

	if gblSource.C < itLow.lastPrice and not itLow.isCrossed

		line.new(itLow.lastIndex, itLow.lastPrice, gblSource.I, itLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK2),
					  width				= 1,
					  force_overlay		= true)
		if stMSLblK2
			box.new(itLow.lastIndex, itLow.lastPrice, gblSource.I, itLow.lastPrice,
					  border_color		= color(na),
					  text				= itMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			itMS.Fun_msOsc_setType(-1)

if msOnChart3
	if gblSource.C > ltHigh.lastPrice and not ltHigh.isCrossed

		line.new(ltHigh.lastIndex, ltHigh.lastPrice, gblSource.I, ltHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK3),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK3
			box.new(ltHigh.lastIndex, ltHigh.lastPrice, gblSource.I, ltHigh.lastPrice,
					  border_color		= color(na),
					  text				= ltMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			ltMS.Fun_msOsc_setType(1)

	if gblSource.C < ltLow.lastPrice and not ltLow.isCrossed

		line.new(ltLow.lastIndex, ltLow.lastPrice, gblSource.I, ltLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK3),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK3
			box.new(ltLow.lastIndex, ltLow.lastPrice, gblSource.I, ltLow.lastPrice,
					  border_color		= color(na),
					  text				= ltMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			ltMS.Fun_msOsc_setType(-1)

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Oscilador ──
//// ───────────────────────

/// ─── Lineal
midLine				= plot(msOsc_Show or show_msOscRange1 or show_msOscRange2 or show_msOscRange3 ? 50 : na,	'Equilibrio',		color.new(msOscilColorMid, 50),	display = display,		editable = false)

[stValue1, stValue2, stValue3] = Fun_msOsc_collectData()

/// ─── Oscilador
msOSC				= (msOsc_WeightK1 * nz(stValue1, 0) + msOsc_WeightK2 * nz(stValue2, 0) + msOsc_WeightK3 * nz(stValue3, 0)) / (msOsc_WeightK1 * (na(stValue1) ? 0 : 1) + msOsc_WeightK2 * (na(stValue2) ? 0 : 1) + msOsc_WeightK3 * (na(stValue3) ? 0 : 1))
msPlot				= plot(msOsc_Show ? msOSC : na,				'Oscilador Market Structure',			color.from_gradient(msOSC, 0, 100, color.new(co_msOscSell, 0), color.new(co_msOscBuy, 0)), 1,	display = display)

/// ─── Histogram Cycle
// plot				(show_msOscRange1 ? stValue1 : na,			'Oscilador de rango corto',				color.new(co_msOscRange, 40),	1,	display = display)
// plot				(show_msOscRange2 ? stValue2 : na,			'oscilador de rango Intermedio',		color.new(co_msOscRange, 40),	1,	display = display)
// plot				(show_msOscRange3 ? stValue3 : na,			'Oscilador de rango Largo',				color.new(co_msOscRange, 40),	1,	display = display)

cycleFast			= cycleOpt ? msOSC - ta.ema(msOSC, cyc_Smooth) + 50 : 50
plotcandle			(50., 50., 50., cycleFast,					'Histograma Cycle',						cycleFast > 50 ? color.new(co_msOscBuy, 20) : color.new(co_msOscSell, 20),	display = display,	bordercolor = cycleOpt ? cycleFast > 50 ? color.new(co_msOscBuy, 20) : color.new(co_msOscSell, 20) : color.gray)

fill				(msPlot, midLine, 100, cycleOpt ? 60 : 50, top_color = color.new(co_msOscBuy,   0), bottom_color = color.new(co_msOscBuy, 100), title = 'Bullish Gradient Fill')
fill				(msPlot, midLine,  cycleOpt ? 40 : 50,  0, top_color = color.new(co_msOscSell, 100), bottom_color = color.new(co_msOscSell,   0), title = 'Bearish Gradient Fill')


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║	RSI Supertrend				║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

// co_sTrend_Up							= _co_gbl_buy
// co_sTrend_Down							= _co_gbl_sell
// co_sTrend_RSI							= _co_gbl_white			// AmeTrBlueFrost
// co_sTrend_Dark							= _co_gbl_black			// PlatziBlue70

// //// ───────────────────────
// /// ─── Supertrend Rsi
// /// ─── Variables ────
// //// ───────────────────────

// show_sTrendSTrend						= input.bool	(defval = false,		title = 'Visualizar Supertrend',	group = 'RSI Settings')

// sTrendRSILength							= input.int		(defval = 14,			title = 'Longitud RSI',				group = 'RSI Settings')
// sTrendSmoothLength						= input.int		(defval = 21,			title = 'Longitud RSI Suavisado',	group = 'RSI Settings')
// show_sTrendISmoothed					= input.bool	(defval = false,		title = 'Suavisado RSI',			group = 'RSI Settings')

// sTrendMALength							= input.int		(defval = 14,			title = 'Longitud MA',				group = 'MA Settings',			display = display.data_window)
// sTrendMAType							= input.string	(defval = 'HMA',		title = 'Tipo MA',					group = 'MA Settings',			options = ['SMA', 'HMA', 'EMA', 'SMMA', 'WMA', 'VWMA'],	display = display.data_window)

// sTrendFactor							= input.float	(defval = 0.8,			title = 'Factor',					group = 'Super Trend Settings')
// sTrendATRLength							= input.int		(defval = 10,			title = 'Longitud ATR',				group = 'Super Trend Settings')

// //// ───────────────────────
// /// ─── Supertrend Rsi
// /// ─── Funciones ────
// //// ───────────────────────

// /// ─── function calculate ATR
// FussTrend_CalculateATR(_source, _atr_length) =>
// 	_highest_high						= ta.highest(_source, _atr_length)
// 	_lowest_low							= ta.lowest(_source, _atr_length)
// 	_true_range							= na(_highest_high[1]) ? _highest_high - _lowest_low : math.max(_highest_high - _lowest_low, math.abs(_highest_high - _source[1]), math.abs(_lowest_low - _source[1]))
// 	ta.rma(_true_range, _atr_length)

// //// ───────────────────────
// /// ─── Supertrend Rsi
// /// ─── Math ─────────
// //// ───────────────────────

// /// ─── Function to calculate Supertrend
// FussTrend_CalculateSupertrend(_factor, _atr_length, _source) =>
// 	_price_source						= _source
// 	_atr								= FussTrend_CalculateATR(_source, _atr_length)
// 	_upper_band							= _price_source + _factor * _atr
// 	_lower_band							= _price_source - _factor * _atr
// 	_prev_lowerband						= nz(_lower_band[1])
// 	_prev_upperband						= nz(_upper_band[1])
// 	_lower_band							:= _lower_band > _prev_lowerband or _source[1] < _prev_lowerband ? _lower_band : _prev_lowerband
// 	_upper_band							:= _upper_band < _prev_upperband or _source[1] > _prev_upperband ? _upper_band : _prev_upperband
// 	int _trend_direction				= na
// 	float _supertrend_value				= na
// 	FusTPrevSupertrend					= _supertrend_value[1]
// 	if na(_atr[1])
// 		_trend_direction				:= 1
// 	else if FusTPrevSupertrend			== _prev_upperband
// 		_trend_direction				:= _source > _upper_band ? -1 : 1
// 	else
// 		_trend_direction				:= _source < _lower_band ? 1 : -1
// 	_supertrend_value					:= _trend_direction == -1 ? _lower_band : _upper_band
// 	[_supertrend_value, _trend_direction]

// /// ─── Calculete Rsi ───────
// sTrend_RsiValue						= show_sTrendISmoothed and show_sTrendSTrend ? ta.hma(ta.rsi(gblSource.C, sTrendRSILength), sTrendSmoothLength) : ta.rsi(gblSource.C, sTrendRSILength)
// // sTrendRsiMovingAverage		= FunGlobalCalculateMA(sTrend_RsiValue, sTrendMALength, sTrendMAType)

// /// ─── Calculating Supertrend based on RSI values
// [sTrendRsiSupertrend, FusTTrendDirection] = FussTrend_CalculateSupertrend(sTrendFactor, sTrendATRLength, sTrend_RsiValue)

// //// ───────────────────────
// /// ─── Supertrend Rsi
// /// ─── Visual ───────
// //// ───────────────────────

// /// ─── Plot RSI / MA
// plot_sTrend_Strend						= plot(show_sTrendSTrend ? sTrendRsiSupertrend	: na,		color = FusTTrendDirection == -1 ? co_sTrend_Up : co_sTrend_Down,							title = 'Supertrend')
// plot_sTrend_Rsi							= plot(show_sTrendSTrend ? sTrend_RsiValue		: na,		color = FusTTrendDirection == -1 ? co_sTrend_Up : co_sTrend_Down,			linewidth = 1,	title = '')

// /// ─── Lines OverBought / OverSold
// plot(110,			color = color.from_gradient(sTrend_RsiValue,	60,	80,	color.new(co_sTrend_Dark, 70),		color.new(co_sTrend_Down, 0)),		linewidth = 6)
// plot(-10,			color = color.from_gradient(sTrend_RsiValue,	20,	40,	color.new(co_sTrend_Up, 0),			color.new(co_sTrend_Dark, 70)),		linewidth = 6)

// /// ─── Filling ───────
// fill(plot_sTrend_Strend, plot_sTrend_Rsi,									color = FusTTrendDirection == 1 ? color.new(co_sTrend_Down, 90) : color.new(co_sTrend_Up, 90),	title = 'Zona de Tendencia')
// fill(plot_sTrend_Strend, plot_sTrend_Rsi, sTrend_RsiValue, sTrendRsiSupertrend, color.new(chart.bg_color, 1000),		FusTTrendDirection == 1 ? co_sTrend_Down : co_sTrend_Up)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════╗
/// ║	Aroon Oscillator			║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

// ＩＮＰＵＴＳ ―――――――――――――――――――

co_oonOsc_buy							= _co_gbl_up
co_oonOsc_sell							= _co_gbl_dn
co_oonOsc_line							= _co_gbl_white

oonOsc_groupvars						= 'Arooon Oscillator'
show_oonOscAroon						= input.bool	(defval = true,		title = 'Visualizar Aroon',	group = oonOsc_groupvars)
oonOsc_length							= input.int		(defval = 42,		title = "Longitud",			group = oonOsc_groupvars)			// 29
oonOsc_smooth							= input.int		(defval = 10,		title = "Smooth",			group = oonOsc_groupvars)			// 25
oonOsc_sign_length						= input.int		(defval = 10,		title = "Signal",			group = oonOsc_groupvars)			// 10
oonOsc_gain_limit						= 10

// ＣＡＬＣＵＬＡＴＩＯＮＳ―――――――――

// Zero Lag Function John Ehlers
Fun_oonOsc_zero_lag(_source, _length, _gain_limit) =>
	// Initialize variables
	float _alpha						= 2 / (_length + 1)
	float _ema							= na
	float _ecu							= na
	float _least_error					= 1000000
	float _best_gain					= 0

	_ema								:= na(_ema[1]) ? _source : _alpha * _source + (1 - _alpha) * nz(_ema[1])

	// Loop to find the best gain
	for int _value						= -_gain_limit to _gain_limit
		_gain							= _value / 10
		_ecu							:= na(_ecu[1]) ? _source : _alpha * (_ema + _gain * (_source - nz(_ecu[1]))) + (1 - _alpha) * nz(_ecu[1])

		float _error					= _source - _ecu

		// Check if this gain results in a smaller error
		if math.abs(_error) < _least_error
			_least_error				:= math.abs(_error)
			_best_gain					:= _gain

	_ecu								:= na(_ecu[1]) ? _source : _alpha * (_ema + _best_gain * (_source - nz(_ecu[1]))) + (1 - _alpha) * nz(_ecu[1])
	_ecu

Fun_oonOsc_calculate_aroon(simple int _length, _smooth) =>
	_aroonDown							= 100 * (ta.lowestbars(low, _length) + _length) / _length
	_aroonUp							= 100 * (ta.highestbars(high, _length) + _length) / _length
	_source								= _aroonUp - _aroonDown
	_gain_limit							= oonOsc_gain_limit
	Fun_oonOsc_zero_lag					(_source, _smooth, _gain_limit)

oonOsc_multip							= 50
fOnOsc_aroon_osc						= Fun_oonOsc_calculate_aroon(oonOsc_length, oonOsc_smooth) + oonOsc_multip
fOnOsc_sig_line							= ta.sma(fOnOsc_aroon_osc, oonOsc_sign_length)

// ＰＬＯＴ ―――――――――――――――――――――――

oonOsc_plot_line1						= plot(show_oonOscAroon ? fOnOsc_aroon_osc : na,	title = "Oscilador Aroon",	color = color.from_gradient(fOnOsc_aroon_osc, -80 + oonOsc_multip, 80 + oonOsc_multip, co_oonOsc_sell, co_oonOsc_buy))
oonOsc_plot_line_mid					= plot(show_oonOscAroon ? 0 + oonOsc_multip : na,	title = "Linea media",		color = color.new(co_oonOsc_line, 70))

plot(show_oonOscAroon ? fOnOsc_sig_line : na, "Señal", color = bar_index % 2 == 0 ? color.new(co_oonOsc_line, 50) : na)

fill(oonOsc_plot_line1,					oonOsc_plot_line_mid,		0 + oonOsc_multip, -100 + oonOsc_multip,	na, co_oonOsc_sell)
fill(oonOsc_plot_line1,					oonOsc_plot_line_mid,		100 + oonOsc_multip, 0 + oonOsc_multip,		co_oonOsc_buy, na)

// bgcolor(show_oonOscAroon and ta.crossover(fOnOsc_aroon_osc, 0)		? color.new(co_oonOsc_buy, 85)	: na)
// bgcolor(show_oonOscAroon and ta.crossunder(fOnOsc_aroon_osc, 0)		? color.new(co_oonOsc_sell, 85)	: na)

if barstate.islast and show_oonOscAroon
	label.delete(
		 label.new(bar_index, fOnOsc_aroon_osc, str.tostring(math.round(fOnOsc_aroon_osc), format.percent),
				 color					= color(na), 
				 textcolor				= fOnOsc_aroon_osc > 0 ? co_oonOsc_buy : co_oonOsc_sell, 
				 style					= label.style_label_left)[1]
				 )

// // if show_oonOscAroon
// oonOsc_cross_over					= show_oonOscAroon and ta.crossover(fOnOsc_aroon_osc,		fOnOsc_sig_line) ? fOnOsc_aroon_osc[1] : na
// oonOsc_cross_under					= show_oonOscAroon and ta.crossunder(fOnOsc_aroon_osc,		fOnOsc_sig_line) ? fOnOsc_aroon_osc[1] : na

// plotchar(oonOsc_cross_over,
// 		  title						= "cruce reversion ▲",
// 		  char						= "●", 
// 		  location					= location.absolute, 
// 		  color						= co_oonOsc_buy,
// 		  size						= size.tiny, 
// 		  offset					= -1)

// plotchar(oonOsc_cross_under,
// 		  title						= "cruce reversion ▼",
// 		  char						= "●", 
// 		  location					= location.absolute, 
// 		  color						= co_oonOsc_sell, 
// 		  size						= size.tiny, 
// 		  offset					= -1)

bgcolor(fOnOsc_aroon_osc > 0 ? color.new(co_oonOsc_buy, 95) : color.new(co_oonOsc_sell, 95))


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
colorTsiMuDiBaseLong					= _co_gbl_long
colorTsiMuDiBaseShort					= _co_gbl_short

colorTsiMuDiTendency					= _co_gbl_neutral
colorTsiMuDiMultitimeframe				= _co_gbl_yellow
colorTsiMuDiDivergBg					= _co_gbl_black

colorTsiMuDiDivergLong					= _co_gbl_buy
colorTsiMuDiDivergShort					= _co_gbl_sell
colorTsiMuDiDivergNone					= color.new(_co_gbl_black,			100)
colorTsiMuDiText						= color.new(_co_gbl_txt_dark,		0)

/// ─── Inputs ───
globalTSIGroupTimeframe					= 'TSI & Divergences'
vTsiMuDiLong							= input.int		(defval = 6,		title = 'Longitud de Compra',			group = globalTSIGroupTimeframe)
vTsiMuDiShort							= input.int		(defval = 13,		title = 'Longitud de Venta',			group = globalTSIGroupTimeframe)
vTsiMuDiSignal							= input.int		(defval = 5,		title = 'Longitud de Señal',			group = globalTSIGroupTimeframe)

/// ─── divergences ───
vTsiMuDiLBR								= 5									//	Corrección a la derecha
vTsiMuDiLBL								= 5									//	Corrección a la izquierda
vTsiMuDiRangeUpper						= 30								//	Rango de corrección maximo
vTsiMuDiRangeLower						= 2									//	Rango de corrección minimo
/// ─── Show ───
showTsiMuDiPlotDiverg					= input.bool	(defval = true,		title = 'Divergencias',					group = globalTSIGroupTimeframe,		inline = 'diverg show')
showTsiMuDiPlotDivergScalp				= input.bool	(defval = true,		title = 'Scalp',						group = globalTSIGroupTimeframe,		inline = 'diverg show')
showTsiMuDiCloudOn						= input.bool	(defval = true,		title = 'TSI Cloud',					group = globalTSIGroupTimeframe)

vTsiMuDiSource							= gbl_Source_C
// vTsiMuDiSource							= gbl_Source_C[0]

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────

/// function tendency (smooth & tsi calculate)
FunTsiMuDiCalculateTendencyTSI(_source, _long, _short) =>
	_change								= ta.change(_source)
	_smooth_single						= ta.ema(_change, _long)
	_smooth_double						= ta.ema(_smooth_single, _short)
	_x									= 50
	_plus								= 50
	_smooth								= _smooth_double
	_smooth_abs							= math.abs(_smooth_double)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────

/// function calculate TSI
FunTsiMuDiCalculateDoubleSmooth(_source, _long, _short) =>
	fist_smooth							= ta.ema(_source, _long)
	ta.ema(fist_smooth, _short)

FunTsiMuDiCalculateTSI(_source, _long, _short, _x) =>
	_change								= ta.change(_source)
	// _x									= 125
	_plus								= 50
	_smooth								= FunTsiMuDiCalculateDoubleSmooth(_change, _long, _short)
	_smooth_abs							= FunTsiMuDiCalculateDoubleSmooth(math.abs(_change), _long, _short)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────
/// ─── Instances ───
//// ───────────────────────

/// Multitimeframe
/// instance function calculate multitimeframe Tsi
iTsiMuDiCalculateMultiTfTSI				= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort, 170)
iTsiMuDiCalculateMultiTfEMA				= ta.ema(iTsiMuDiCalculateMultiTfTSI, vTsiMuDiSignal)

/// instance function global timeframe
iTsiMuDiCalculateMultiTfTSIRange		= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500 ? FunGlobalCalculateTimeframeVariant(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) : timeframe.period
// iTsiMuDiCalculateMultiTfTSIRange		= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500 ? FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, FunGlobalTimeFrame(strGlobalMultiTimeFrame)) : timeframe.period

/// ─── Timeframe multitimeframe Tsi
arrTsiMuDiMultiTimeframeTicker			= request.security(syminfo.tickerid,	iTsiMuDiCalculateMultiTfTSIRange,	iTsiMuDiCalculateMultiTfTSI,	barmerge.gaps_on)

/// ─── plot color
insTsiMuDiMultiTimefPlotColor			= iTsiMuDiCalculateMultiTfTSI	> iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateMultiTfTSI	<= iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseShort	: na

/// Tendency
/// instances function calculate tendency  Tsi
iTsiMuDiCalculateTendencyTSI			= FunTsiMuDiCalculateTendencyTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateTendencyEma			= ta.ema(iTsiMuDiCalculateTendencyTSI, vTsiMuDiSignal)

/// fill color tendency
insTsiMuDiCloudTendencyColor			= iTsiMuDiCalculateTendencyTSI	> iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTendencyTSI	<= iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseShort		: na

/// PRESENT
/// instance function calculate present Tsi
iTsiMuDiCalculateTSI					= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort, 125)
iTsiMuDiCalculateEma					= ta.ema(iTsiMuDiCalculateTSI, vTsiMuDiSignal)

/// ─── plot color
insTsiMuDiPlotColor						= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na
/// ─── fill cloud color
insTsiMuDiCloudColor					= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na

//// ───────────────────────
/// ─── Display ───
//// ───────────────────────

/// ─── Plot

 /// plot multi timeframe
insTsiMuDiMultitimefTsiPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? arrTsiMuDiMultiTimeframeTicker : na,							color = color.new(colorTsiMuDiMultitimeframe, 60),		linewidth = 2)
insTsiMuDiMultitimefEmaPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? ta.ema(arrTsiMuDiMultiTimeframeTicker, vTsiMuDiSignal) : na,	color = color.new(colorTsiMuDiMultitimeframe, 60),		linewidth = 1)

/// plot tendency TSI
insTsiMuDiTendencyTsiPlotLine			= plot(showTsiMuDiTSITendency ? iTsiMuDiCalculateTendencyTSI : na,									color = color.new(colorTsiMuDiTendency, 75),			linewidth = 1)
insTsiMuDiTendencyEmaPlotLine			= plot(showTsiMuDiTSITendency ? ta.ema(iTsiMuDiCalculateTendencyTSI,	vTsiMuDiSignal) : na,		color = color.new(colorTsiMuDiTendency, 50),			linewidth = 1)

/// fill tendency
fill(insTsiMuDiTendencyTsiPlotLine, insTsiMuDiTendencyEmaPlotLine,																			color = color.new(insTsiMuDiCloudTendencyColor, 85))

/// plot present TSI
// plot(showTsiMuDiTSIDivergs				? iTsiMuDiCalculateTSI	: na,																		color = color.new(colorTsiMuDiDivergBg, 60),			linewidth = 6)		//	plot TSI blue
// plot(showTsiMuDiTSIDivergs				? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,												color = color.new(colorTsiMuDiDivergBg, 60),			linewidth = 6)		//	plot EMA blue
insTsiMuDiTsiPlotLine					= plot(showTsiMuDiTSIDivergs ? iTsiMuDiCalculateTSI	: na,											color = color.new(insTsiMuDiPlotColor, 20),				linewidth = 2)		//	plot TsiSI
insTsiMuDiEmaPlotLine					= plot(showTsiMuDiTSIDivergs ? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,					color = color.new(insTsiMuDiPlotColor, 20),				linewidth = 2)		//	plot EMA

/// fill present
fill(insTsiMuDiTsiPlotLine, insTsiMuDiEmaPlotLine,																							color = showTsiMuDiCloudOn ? color.new(insTsiMuDiCloudColor, 70) : na)						//	fill

//// ───────────────────────
/// ─── Divergences ───
//// ───────────────────────

insTsiMuDiPLFound						= na(ta.pivotlow(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true
insTsiMuDiPHFound						= na(ta.pivothigh(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	insTsiMuDiBars						= ta.barssince(cond == true)
	vTsiMuDiRangeLower					<= insTsiMuDiBars and insTsiMuDiBars <= vTsiMuDiRangeUpper

//// ───────────────────────
/// ─── Compra regular ───
//// ───────────────────────

/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICELL							= low[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsBULLCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

// plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
// 			  offset					= -vTsiMuDiLBR,
// 			  title						= 'Confirmacion de Compra',
// 			  linewidth					= 2,
// 			  color						= tsiDiInsBULLCond ? color.new(colorTsiMuDiDivergLong, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and	tsiDiInsBULLCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Compra ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Compra scalp ───
//// ───────────────────────

/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICEHL							= low[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsHiddenBullCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

// plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
// 			  offset					= -vTsiMuDiLBR,
// 			  title						= 'Confirmación de Compra trend',
// 			  linewidth					= 2,
// 			  color						= tsiDiInsHiddenBullCond ? color.new(colorTsiMuDiDivergLong, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBullCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra trend',
			  text						= ' △ trend ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 40),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta regular ───
//// ───────────────────────

/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICEHH							= high[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsBEARCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

// plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
// 			  offset					= -vTsiMuDiLBR,
// 			  title						= 'Confirmación de Venta',
// 			  linewidth					= 2,
// 			  color						= tsiDiInsBEARCond ? color.new(colorTsiMuDiDivergShort, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsBEARCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Venta ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta scalp ───
//// ───────────────────────

/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICELH							= high[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsHiddenBearCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

// plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
// 			  offset					= -vTsiMuDiLBR,
// 			  title						= 'Confirmación de Venta trend',
// 			  linewidth					= 2,
// 			  color						= tsiDiInsHiddenBearCond ? color.new(colorTsiMuDiDivergShort, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBearCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta trend',
			  text						= ' ▽ trend ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 40),
			  textcolor					= colorTsiMuDiText)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
