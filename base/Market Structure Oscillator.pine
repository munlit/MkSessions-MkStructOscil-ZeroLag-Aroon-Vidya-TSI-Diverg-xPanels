/// ╔═══════════════════════════════╗
/// ║ 	Market Structure Oscilador	║
/// ║ 	@	Allen.					║
/// ║ 	@	LuxAlgo					║
/// ╚═══════════════════════════════╝

//@version=5
indicator('Market Structure Oscilador [Allen]', 'MS Osc', false, format.price, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Colors ──────
//// ───────────────────────

/// ─── Standard ──
	// color.aqua								= #00BCD4
	// color.blue								= #2196F3
	// color.teal								= #00897B
	// color.green								= #4CAF50
	// color.olive								= #808000
	// color.lime								= #00E676
	// color.yellow								= #FFEB3B
	// color.orange								= #FF9800
	// color.maroon								= #880E4F
	// color.red								= #FF5252
	// color.fuchsia							= #E040FB
	// color.purple								= #9C27B0
	// color.navy								= #311B92
	// color.black								= #363A45
	// color.gray								= #787B86
	// color.silver								= #B2B5BE
	// color.white								= #FFFFFF

/// ─── Ameritrade ───
	// AmeTrWhite								= #FFFFFF								// AmeritradeWhite
	// AmeTrGrayPlatinum						= #F7F7F7								// AmeritradeGrayPlatinum
	// AmeTrGrayNickel							= #F1F1F1								// AmeritradeGrayNickel
	// AmeTrGrayNickelDark20					= #C0C0C0								// AmeritradeGrayNickelDark20
	// AmeTrGrayAluminum						= #E6E7E9								// AmeritradeGrayAluminum
	// AmeTrGrayAsh								= #D8D8D8								// AmeritradeGrayAsh
	// AmeTrGrayStone							= #999999								// AmeritradeGrayStone
	// AmeTrGrayIron							= #666666								// AmeritradeGrayIron
	// AmeTrGrayCharcoal						= #333333								// AmeritradeGrayCharcoal
	// AmeTrBlack								= #000000								// AmeritradeBlack
	// AmeTrGreenCabbage						= #EBF6E9								// AmeritradeGreenCabbage
	// AmeTrGreenLight70						= #B4D6B2								// AmeritradeGreenLight70
	// AmeTrGreenLight50						= #83BC7F								// AmeritradeGreenLight50
	// AmeTrGreenNat							= #40a829								// AmeritradeGreenNat
	// AmeTrGreenLight20						= #399333								// AmeritradeGreenLight20
	// AmeTrGreen								= #087900								// AmeritradeGreen
	// AmeTrGreenDark20							= #066000								// AmeritradeGreenDark20
	// AmeTrGreenMoss							= #BEE7D3								// AmeritradeGreenMoss
	// AmeTrGreenMint							= #6DC4BC								// AmeritradeGreenMint
	// AmeTrGreenPine							= #38635A								// AmeritradeGreenPine
	// AmeTrRedRose								= #FAD1CF								// AmeritradeRedRose
	// AmeTrRedLight50							= #E08988								// AmeritradeRedLight50
	// AmeTrRedLight20							= #CD4241								// AmeritradeRedLight20
	// AmeTrRed									= #C11312								// AmeritradeRed
	// AmeTrRedDark20							= #940F0E								// AmeritradeRedDark20
	// AmeTrOrangePeach							= #FCE7CA								// AmeritradeOrangePeach
	// AmeTrOrangeCarrot						= #ED8902								// AmeritradeOrangeCarrot
	// AmeTrOOrangeYam							= #BD5310								// AmeritradeOOrangeYam
	// AmeTrBlueFrost							= #E1EEF9								// AmeritradeBlueFrost
	// AmeTrBlueLagoon							= #316486								// AmeritradeBlueLagoon
	// AmeTrBlueNavy							= #2A5673								// AmeritradeBlueNavy
	// AmeTrBlueNcean							= #64A1C6								// AmeritradeBlueNcean
	// AmeTrPurpleEggPlant						= #732181								// AmeritradePurpleEggPlant

/// ─── Axi ───
	// AxiPrimary								= #FC404D								// AxiPrimary				/// ► ◄ ▲ ▼
	// AxiSecondary								= #282424								// AxiSecondary				/// ↑ ↓ → ←
	// AxiAccent								= #61CE70								// AxiAccent
	// Axi7a46f22								= #D11C36								// Axi7a46f22				/// @|1↓→9|1→5|.-|_789_|	/// coint|1↓→6|1→6|.-|_47_|
	// Axi1519066c								= #FC404D								// Axi1519066c				/// @|1↓→6|1↓→6|!|_7_|		/// coint|1↓→9|1→4|.!|_4_|
	// Axi3d4fa1a1								= #F0EBE3								// Axi3d4fa1a1				/// @|1↓→9|1↓→9|!|_7_|		/// coint|1↓→9|1→6|.-|_1_|		/// ok|1↓→6|1→5|.-|_147_|		/// |1↓→9|1→4|.!|_4_|
	// Axi638b46c1								= #FCD758								// Axi638b46c1				/// @|1→↑12|.-|_147_|
	// Axid07bac9								= #F9B4A8								// Axid07bac9				/// @|1→↑12|.-|_741_|
	// Axie63a114								= #2C4D5A								// Axie63a114				/// @|1→↑12|.-|_852_|		/// gt|1→↑10|.-|_52_|			/// zoo|1→↑10|.-|_82_|			/// |1→↑11|.-|_82_|
	// Axi8bf0845								= #A4D866								// Axi8bf0845				/// @|1→↑12|.-|_852_|		/// thinkors|1→↑9|_8_|2|		/// book|1→↑9|_8_|2|			/// disc|1→↑10|.-|_63_|
	// Axi75c6da1								= #282424								// Axi75c6da1				/// @|1→↑12|.-|_963_|		/// lbx|1→↑11|.-|852|
	// Axi378280f								= #45C2C7								// Axi378280f				/// @|1↓→9|1→6|.|_4_|		/// ok|1↓→6|1→4|.!|_789_|
	// Axi4de92c5								= #6CADDF								// Axi4de92c5				/// @|1→↑13|.-!|_963_|		/// exch|1→↑10|.-|_85_|
	// Axi413dab8			   					= #00275D								// Axi413dab8											/// hotm|1→↑10|.-|_7_|			/// ins|1→↑10|.-|_95_|
	// Axib3fab89								= #55165C								// Axib3fab89
	// Axi548138f								= #45C2C7								// Axi548138f				/// ► ◄ ▲ ▼
	// Axi5ed9920								= #EA1616								// Axi5ed9920				/// ↑ ↓ → ←
	// Axi70f7335								= #DD0606								// Axi70f7335

/// ─── GrayScale ───
	// GraySFocus								= #2D7AED								// GrayScaleFocus
	// GraySWhite								= #FFF									// GrayScaleWhite
	// GraySBlack								= #000									// GrayScaleBlack
	// GraySPrimaryBlackberry					= #2E234B								// GrayScalePrimaryBlackberry
	// GraySPrimaryBlackberry40					= rgba(46, 35, 75, .4))					// GrayScalePrimaryBlackberry40
	// GraySPrimaryBlackberry65					= rgba(46, 35, 75, .65))				// GrayScalePrimaryBlackberry65
	// GraySPrimaryCoral						= #FFB198								// GrayScalePrimaryCoral
	// GraySSecondaryForestGreen				= #244024								// GrayScaleSecondaryForestGreen
	// GraySSecondaryKeyLime					= #B5CE6F								// GrayScaleSecondaryKeyLime
	// GraySSecondaryLavender					= #C5BFE4								// GrayScaleSecondaryLavender
	// GraySSecondaryLavender40					= rgba(197, 191, 228, .4))				// GrayScaleSecondaryLavender40
	// GraySsecondaryLavender60					= rgba(197, 191, 228, .6))				// GrayScalesecondaryLavender60
	// GrayShoverWhite							= #C0BDC9								// GrayScalehoverWhite
	// GrayShoverBlackberry						= #42326B								// GrayScalehoverBlackberry
	// GraySdisabledBlackberry					= #4D4466								// GrayScaledisabledBlackberry
	// GraySactiveBlackberry					= #4D4466								// GrayScaleactiveBlackberry
	// GrayShoverCcoral							= #FFCDBD								// GrayScalehoverCcoral
	// GraySactiveCcoral						= #FF9E80								// GrayScaleactiveCcoral
	// GrayShoverGray							= #827B93								// GrayScalehoverGray
	// GrayShoverGray2							= #6D6581								// GrayScalehoverGray2
	// GraySgrayCharcoal						= #282525								// GrayScalegrayCharcoal
	// GraySgrayCharcoal70						= rgba(40, 37, 37, .7))					// GrayScalegrayCharcoal70
	// GraySgrayCharcoal80						= rgba(40, 37, 37, .8))					// GrayScalegrayCharcoal80
	// GraySgrayLight							= #F5F5F5								// GrayScalegrayLight
	// GraySgrayMedium							= #EEE									// GrayScalegrayMedium
	// GraySgray70								= #696666								// GrayScalegray70
	// GraySgrayDark							= #C1C1C1								// GrayScalegrayDark
	// GraySwebSeasalt		    				= #FAFAFC								// GrayScalewebSeasalt
	// GraySwebDivider							= #e9e7f1								// GrayScalewebDivider
	// GraySwebBackground						= #f3f2fa								// GrayScalewebBackground
	// GraySwebSecondaryText					= #77708A								// GrayScalewebSecondaryText
	// GraySwebStroke							= #D3CEEB								// GrayScalewebStroke
	// GraySwebErrors							= #E00000								// GrayScalewebErrors
	// GraySwebService							= #2D7AED								// GrayScalewebService

/// ─── Interactive ───
	// IntAcPrimary3							= hsla(355, 85%, 46%, 0.03)		    	// InteractivePrimary3
	// IntAcPrimary5							= hsla(355, 85%, 46%, 0.05)		    	// InteractivePrimary5
	// IntAcPrimary10							= hsla(355, 85%, 46%, 0.10)		    	// InteractivePrimary10
	// IntAcPrimary20							= hsla(355, 85%, 46%, 0.20)		    	// InteractivePrimary20
	// IntAcPrimary30							= hsla(355, 85%, 46%, 0.30)		    	// InteractivePrimary30
	// IntAcPrimary40							= hsla(355, 85%, 46%, 0.40)		    	// InteractivePrimary40
	// IntAcPrimary50							= hsla(355, 85%, 46%, 0.50)		    	// InteractivePrimary50
	// IntAcPrimary60							= hsla(355, 85%, 46%, 0.60)		    	// InteractivePrimary60
	// IntAcPrimary70							= hsla(355, 85%, 46%, 0.70)		    	// InteractivePrimary70
	// IntAcPrimary80							= hsla(355, 85%, 46%, 0.80)		    	// InteractivePrimary80
	// IntAcPrimary90							= hsla(355, 85%, 46%, 0.90)		    	// InteractivePrimary90
	// IntAcPrimary								= hsla(355, 85%, 46%, 1.0)				// InteractivePrimary
	// IntAcPrimaryDark10						= hsla(355, 85%, 41%, 1.0)				// InteractivePrimaryDark10
	// IntAcPrimaryDark20						= hsla(355, 85%, 36%, 1.0)				// InteractivePrimaryDark20
	// IntAcPrimaryDark30						= hsla(355, 85%, 31%, 1.0)				// InteractivePrimaryDark30
	// IntAcPrimaryDark40						= hsla(355, 85%, 26%, 1.0)				// InteractivePrimaryDark40
	// IntAcPrimaryDark50						= hsla(355, 85%, 21%, 1.0)				// InteractivePrimaryDark50
	// IntAcSecondary3							= hsla(0, 0%, 13%, 0.03)				// InteractiveSecondary3
	// IntAcSecondary5							= hsla(0, 0%, 13%, 0.05)				// InteractiveSecondary5
	// IntAcSecondary10							= hsla(0, 0%, 13%, 0.10)				// InteractiveSecondary10
	// IntAcSecondary20							= hsla(0, 0%, 13%, 0.20)				// InteractiveSecondary20
	// IntAcSecondary30							= hsla(0, 0%, 13%, 0.30)				// InteractiveSecondary30
	// IntAcSecondary40							= hsla(0, 0%, 13%, 0.40)				// InteractiveSecondary40
	// IntAcSecondary50							= hsla(0, 0%, 13%, 0.50)				// InteractiveSecondary50
	// IntAcSecondary60							= hsla(0, 0%, 13%, 0.60)				// InteractiveSecondary60
	// IntAcSecondary70							= hsla(0, 0%, 13%, 0.70)				// InteractiveSecondary70
	// IntAcSecondary80							= hsla(0, 0%, 13%, 0.80)				// InteractiveSecondary80
	// IntAcSecondary90							= hsla(0, 0%, 13%, 0.90)				// InteractiveSecondary90
	// IntAcSecondary							= hsla(0, 0%, 13%, 1.0)			    	// InteractiveSecondary
	// IntAcSecondaryDark10						= hsla(0, 0%, 10%, 1.0)			    	// InteractiveSecondaryDark10
	// IntAcSecondaryDark20						= hsla(0, 0%, 7%, 1.0)					// InteractiveSecondaryDark20
	// IntAcSecondaryDark30						= hsla(0, 0%, 4%, 1.0)					// InteractiveSecondaryDark30
	// IntAcSecondaryDark40						= hsla(0, 0%, 1%, 1.0)					// InteractiveSecondaryDark40
	// IntAcSecondaryDark50						= hsla(0, 0%, 0%, 1.0)					// InteractiveSecondaryDark50
	// IntAcTertiary3							= hsla(202, 76%, 19%, 0.03)		    	// InteractiveTertiary3
	// IntAcTertiary5							= hsla(202, 76%, 19%, 0.05)		    	// InteractiveTertiary5
	// IntAcTertiary10							= hsla(202, 76%, 19%, 0.10)		    	// InteractiveTertiary10
	// IntAcTertiary20							= hsla(202, 76%, 19%, 0.20)		    	// InteractiveTertiary20
	// IntAcTertiary30							= hsla(202, 76%, 19%, 0.30)		    	// InteractiveTertiary30
	// IntAcTertiary40							= hsla(202, 76%, 19%, 0.40)		    	// InteractiveTertiary40
	// IntAcTertiary50							= hsla(202, 76%, 19%, 0.50)		    	// InteractiveTertiary50
	// IntAcTertiary60							= hsla(202, 76%, 19%, 0.60)		    	// InteractiveTertiary60
	// IntAcTertiary70							= hsla(202, 76%, 19%, 0.70)		    	// InteractiveTertiary70
	// IntAcTertiary80							= hsla(202, 76%, 19%, 0.80)		    	// InteractiveTertiary80
	// IntAcTertiary90							= hsla(202, 76%, 19%, 0.90)		    	// InteractiveTertiary90
	// IntAcTertiary							= hsla(202, 76%, 19%, 1.0)				// InteractiveTertiary
	// IntAcTertiaryDark10						= hsla(202, 76%, 14%, 1.0)				// InteractiveTertiaryDark10
	// IntAcTertiaryDark20						= hsla(202, 76%, 9%, 1.0)				// InteractiveTertiaryDark20
	// IntAcTertiaryDark30						= hsla(202, 76%, 4%, 1.0)				// InteractiveTertiaryDark30
	// IntAcTertiaryDark40						= hsla(202, 76%, 0%, 1.0)				// InteractiveTertiaryDark40

/// ─── Visa ───
	// VisPrimary								= #1434CB								// VisaBrandPrimary			/// ► ◄ ▲ ▼
	// VisPrimaryLight							= #3B57DE								// VisaBrandPrimaryLight	/// ↑ ↓ → ←
	// VisPrimaryDark							= #021E4C								// VisaBrandPrimaryDark
	// VisSecondary								= #FCC015								// VisaBrandSecondary		/// VT|1↓→6|1→5|!|_7_(.)|	/// coint|1↓→6|1→4|_7_.|		/// ok|1↓→6|1→4|.|_1_|			/// |1↓→6|1→4|!|_7_|		/// |1→6|1→↓6|_1_|  #910
	// VisSecondaryLight						= #FFD700								// VisaBrandSecondaryLight	/// |1↓#→6|1↓→6|_789_|-!|	/// |1↓→6|1→4|-|_74_|
	// VisSecondaryDark							= #F7B600								// VisaBrandSecondaryDark	/// @|1↓→6|1→4|!|_789_|
	// VisTertiary7								= #2C2C2C								// VisaBrandTertiary7		/// @|1↓→6|1→6|.!|_4_(.)|
	// VisTertiary6								= #5C5C5C								// VisaBrandTertiary6		/// @|1↓→9|1→6|.|_7_|		/// ()@|1↓→9|1→6|!|_7_|		/// bix|1↓→6|1→3|.-|_1_|
	// VisTertiary5								= #979797								// VisaBrandTertiary5		/// @|1↓→9|1→5|.!|_7_|
	// VisTertiary4								= #B9B9B9								// VisaBrandTertiary4		/// @|1↓→6|1→5|-|_714_|		/// bix|1↓→3|1→5|.-|_789_|
	// VisTertiary3								= #DEDEDE								// VisaBrandTertiary3		/// @|1→↓6|1→5|_741_|
	// VisTertiary2								= #EEEEEE								// VisaBrandTertiary2									/// ap|1→↓6|1→5|!|_7_|
	// VisTertiary1								= #F7F7F7								// VisaBrandTertiary1		/// @|1→↑12|.-|_741_|		/// gt|1→↑10|.-|_6_|

/// ─── Latam ───
	// LatRedBackground							= rgb(232, 17, 75)						// Latam Red Background

/// ─── Arbe Robotics ───
	// ARoPrimary								= #0035FF								// ArbePrimary
	// ARoPrimaryLight							= #0640FF								// ArbePrimaryLight
	// ARoSecondary		    					= #04ebff								// ArbeSecondary

/// ─── AutoX ───
	// AxPrimary								= #2253F0								// AutoXPrimary
	// AxPrimaryLight							= #0050F9								// AutoXPrimaryLight
	// AxSecondary								= #75ebc0								// AutoXSecondary

/// ─── EEG ───
	// EEGSkyBlue30								= #01EBF9								// EEGSkyBlue30
	// EEGSkyBlue40								= #00E7FD								// EEGSkyBlue40
	// EEGFucsia40								= #FF00B1								// EEGFucsia40
	// EEGFucsia50								= #FE0CB6								// EEGFucsia50

/// ─── Bright Line ───
BrLiYel10								= #FBFD73								// BrightLine Yellow Light
	// BrLiYel20								= #FFFD52								// BrightLine Yellow Light
BrLiYel30								= #FDF43C								// BrightLineB Yellow High
BrLiYel40								= #FEF301								// BrightLineBackground Yellow Nit
	// BrLiYel50								= #FFDB00								// BrightLineBackground Yellow Base

/// ─── Waves Beh ───
	// WavBehPink20								= #FFB7FF								// WavBehPink20
	// WavBehFucsia50							= #DF36DF								// WavBehFucsia50
	// WavBehNude10								= #FFFDDF								// WavBehNude10
	// WavBehSky70								= #06B7FE								// WavBehSky70
	// WavBehAqua50								= #0CF2F2								// WavBehAqua50

/// ─── Victoria Secret ───
	// VictSecPink20							= #EDB3DD								// VictSecPink20
	// VictSecPink50							= #E651CD								// VictSecPink50
	// VictSecFucsia50							= #EA1889								// VictSecFucsia50
	// VictSecWine30							= #C2329F								// VictSecWine30
	// VictSecWine50							= #7D1250								// VictSecWine50
	// VictSecWine60							= #7C2558								// VictSecWine60

/// ─── Mongo DB ───
MongoSky10								= #E3FCF7								// MongoDBSky10
	// MongoYellow50							= #FFE212								// MongoDBYellow50
	// MongoLime50								= #B1FF05								// MongoDBLime50
	// MongoGreen50								= #00ED64								// MongoDBGreen50
	// MongoGreen60								= #13AA52								// MongoDBGreen60
	// MongoGreen70								= #00684A								// MongoDBGreen70
	// MongoGreen80								= #014E3D								// MongoDBGreen80
	// MongoGray50								= #42494F								// MongoDBGray50
	// MongoGray70								= #001E2B								// MongoDBGray70
	// MongoBlack50								= #231F20								// MongoDBBlack50

/// ─── Platzi ───
PlatziGreen30							= #ADEB42								// PlatziGreen60
	// PlatziGreen40							= #85C638								// PlatziGreen60
	// PlatziGreen50							= #95CA3E								// PlatziGreen50
	// PlatziGreen60							= #98CA3F								// PlatziGreen40
	// PlatziBlue50								= #24385B								// PlatziBlue50
	// PlatziBlue70								= #121F3D								// PlatziBlue70
	// PlatziBlue80								= #0C1633								// PlatziBlue80

/// ─── Ultr ───
	// UltrBlueSky10							= #59F2E9								// UltrBlueSky10
	// UltrBlueSky20							= #39F0EA								// UltrBlueSky20
	// UltrMenta10								= #E0F9EF								// UltrMenta10
	// UltrMenta20								= #80F3EC								// UtlrMenta20
	// UltrMenta30								= #7FFFD4								// UltrMenta30
	// UltrMenta40								= #73FFCA								// UltrMenta40
	// UltrMenta50								= #9CFFD7								// UtlrMenta50
	// UltrMenta60								= #4FFFC0								// UtlrMenta60
	// UltrGreen50								= #95BD5F								// UltrGreen50
	// UltrRose40								= #FFA3E3								// UltrRose
	// UltrFucsia30								= #FF6FD3								// UltrFucsia
	// UltrLyla									= #7E57C2								// UltrLyla
	// UltrLightGray							= #787B86								// UltrLightGray
	// UltrRedNit								= #DE0011								// UltrRedNit
	// UltrRed									= #DB004B								// UltrRed
	// UltrBlue									= #003BDE								// UltrBlue
	// UltrYellow								= #F4DE1A								// UltrYellow
	// UltrSkyBlue								= #12CEF8								// UltrSkyBlue
	// UltrOrange								= #FF5A00								// UltrOrange

/// ─── Allen ───
AllenSky10								= #CCF8FF								// AllenSky10
AllenSky20								= #80F3EC								// AllenSky20
	// AllenSky50								= #01EBF9								// AllenSky50

AllenMint10								= #E0F9EF								// AllenMint10
AllenMint20								= #9CFFD7								// AllenMint20
	// AllenMint30								= #7FFFD4								// AllenMint30
	// AllenMint40								= #73FFCA								// AllenMint40
AllenMint50								= #4fffc0								// AllenMint50
AllenMint60								= #33FFAC								// AllenMint60

	// AllenFucsia30							= #E06BAA								// AllenFucsia30
AllenFucsia50							= #EA1889
	// AllenWine50								= #E91E63								// AllenWine50
	// AllenWine60								= #E8114B								// AllenWine60

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Variables ──
//// ───────────────────────

msOscilColorLong	= AllenMint60
msOscilColorShort	= AllenSky10
msOscilColorUp		= AllenMint20
msOscilColorDn		= MongoSky10
msOscilColorChUp	= AllenMint50
msOscilColorChDn	= MongoSky10
msOscilColorOsc		= BrLiYel30
msOscilColorMid		= AllenMint10

display				= display.all - display.status_line

msOsc_Group			= 'Oscilador Market Structure'
msOsc_Show			= input			(defval = true,							title = "Oscilador Market Structure",							group = msOsc_Group)
msWeightK1			= input.float	(defval = 1,							title = "  Escala Corta",					minval = 0,			group = msOsc_Group,	step=.1,		display = display)
msWeightK2			= input.float	(defval = 3,							title = "  Escala Intermedia",				minval = 0,			group = msOsc_Group,	step=.1,		display = display)
msWeightK3			= input.float	(defval = 2,							title = "  Escala Larga",					minval = 0,			group = msOsc_Group,	step=.1,		display = display)
norm_Smooth			= input.int		(defval = 4,							title = '  Oscilador Suavizado',			minval = 1,			group = msOsc_Group,					display = display)
msBullColor			= input.color	(color.new(msOscilColorLong, 0),		title = '  Gradiente: Compra',									group = msOsc_Group,	inline = 'MS')
msBearColor			= input.color	(color.new(msOscilColorShort, 0),		title = 'Venta',												group = msOsc_Group,	inline = 'MS')

oscSig				= input			(defval = true,							title = "Oscilador Market Structure - Cruce (Marca)",			group = msOsc_Group)
oBullColor			= input.color	(msOscilColorLong,						title = '  Marca: Compra',										group = msOsc_Group,	inline = 'SIG')
oBearColor			= input.color	(msOscilColorShort,						title = 'Venta',												group = msOsc_Group,	inline = 'SIG')

cyc_Group			= 'Oscilador Cycle'
cycleOpt			= input			(defval = true,							title = "Oscilador Cycle - Histograma",							group = cyc_Group)
cyc_Smooth			= input.int		(defval = 7,							title = '  Cycle Marca Longitud',			minval = 1,			group = cyc_Group,						display = display)
cBullColor			= input.color	(color.new(msOscilColorUp, 50),			title = '  Histograma: Compra',									group = cyc_Group,		inline = 'CYC')
cBearColor			= input.color	(color.new(msOscilColorDn, 50),			title = 'Venta',												group = cyc_Group,		inline = 'CYC')

cycleSig			= input			(defval = true,							title = "Oscilador Cycle - Cruce (Marca)",						group = cyc_Group)
sBullColor			= input.color	(color.new(msOscilColorUp, 0),			title = '  Marca: Compra',										group = cyc_Group,		inline = 'SIG')
sBearColor			= input.color	(color.new(msOscilColorDn, 0),			title = 'Venta',												group = cyc_Group,		inline = 'SIG')

cycMix_Group			= 'Oscilador MS & Cycle'
msOsCycleSig		= input			(defval = true,							title = "Mix - Cruce (Marca)",									group = cycMix_Group)
sMixBullColor		= input.color	(color.new(msOscilColorUp, 0),			title = '  Mix: Compra',										group = cycMix_Group,	inline = 'SIM')
sMixBearColor		= input.color	(color.new(msOscilColorDn, 0),			title = 'Venta',												group = cycMix_Group,	inline = 'SIM')

msMarcaV1			= input			(defval = 50,							title = " Rango Mix de Venta",									group = cycMix_Group,	inline = 'mM1w')
msMarcaV2			= input			(defval = 50,							title = " / ",													group = cycMix_Group,	inline = 'mM1w')

msMarcaC1			= input			(defval = 50,							title = " Rango Mix de Compra",									group = cycMix_Group,	inline = 'mM2w')
msMarcaC2			= input			(defval = 50,							title = " / ",													group = cycMix_Group,	inline = 'mM2w')

genericGroup		= 'Market Structure en Gráfico'
msOnChart1			= input			(defval = true,							title = "Estructura de rango Corto",							group = genericGroup)
msOnChartK1			= input.string	(defval = '···',						title = '  Linea',		options = ['───', '---', '···'],		group = genericGroup,	inline = 'K1',	display = display)
stMSLblK1T			= input.string	(defval = 'Disabled',					title = 'Etiquetas',	options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K1',	display = display),	stMSLblK1 = stMSLblK1T == 'Enabled'
cBullColorK1		= input.color	(color.new(msOscilColorChUp, 35),		title = '  Colores: Bullish', 									group = genericGroup,	inline = 'K1c')
cBearColorK1		= input.color	(color.new(msOscilColorChDn, 35),		title = 'Venta',												group = genericGroup,	inline = 'K1c')

msOnChart2			= input			(defval = true,							title = "Estructura de rango Intermedio",						group = genericGroup)
msOnChartK2			= input.string	(defval = '---',						title = '  Linea',		options = ['───', '---', '···'],		group = genericGroup,	inline = 'K2',	display = display)
stMSLblK2T			= input.string	(defval = 'Disabled',					title = 'Etiquetas',	options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K2',	display = display),	stMSLblK2 = stMSLblK2T == 'Enabled'
cBullColorK2		= input.color	(color.new(msOscilColorChUp, 35),		title = '  Colores: Compra',									group = genericGroup,	inline = 'K2c')
cBearColorK2		= input.color	(color.new(msOscilColorChDn, 35),		title = 'Venta',												group = genericGroup,	inline = 'K2c')

msOnChart3			= input			(defval = true,							title = "Estructura de rango Largo", 							group = genericGroup)
msOnChartK3			= input.string	(defval = '───',						title = '  Linea',		options = ['───', '---', '···'],		group = genericGroup,	inline = 'K3',	display = display)
stMSLblK3T			= input.string	(defval = 'Enabled',					title = 'Etiquetas',	options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K3',	display = display),	stMSLblK3 = stMSLblK3T == 'Enabled'
cBullColorK3		= input.color	(color.new(msOscilColorChUp, 35),		title = '  Colores: Compra',									group = genericGroup,	inline = 'K3c')
cBearColorK3		= input.color	(color.new(msOscilColorChDn, 35),		title = 'Venta',												group = genericGroup,	inline = 'K3c')

msOscCG				= 'Rango de Oscilador'
msDataK1			= input			(false,									title = "Oscilador de rango Corto",								group = msOscCG,		inline = 'k1w')
msColorK1			= input			(color.new(msOscilColorOsc, 50),		title = "",														group = msOscCG,		inline = 'k1w')

msDataK2			= input			(false,									title = "Oscilador de rango Intermedio",						group = msOscCG,		inline = 'k2w')
msColorK2			= input			(color.new(msOscilColorOsc, 50),		title = "",														group = msOscCG,		inline = 'k2w')

msDataK3			= input			(true,									title = "Oscilador de rango Largo",								group = msOscCG,		inline = 'k3w')
msColorK3			= input			(color.new(msOscilColorOsc, 50),		title = "",														group = msOscCG,		inline = 'k3w')

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Types ──
//// ───────────────────────

type BAR
	float   open	= open
	float   high	= high
	float   low		= low
	float   close	= close
	int     index	= bar_index

type SWINGS
	float	lastPrice
	float	midPrice
	float	prevPrice

	int		lastIndex
	int		midIndex
	int		prevIndex

	bool	isCrossed

type MS
	int		type = 0

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Instances ──
//// ───────────────────────

BAR bar	= BAR.new()

var SWINGS stLow	= SWINGS.new()
var SWINGS stHigh	= SWINGS.new()
var MS stMS			= MS.new()

var SWINGS itLow	= SWINGS.new()
var SWINGS itHigh	= SWINGS.new()
var MS itMS			= MS.new()

var SWINGS ltLow	= SWINGS.new()
var SWINGS ltHigh	= SWINGS.new()
var MS ltMS			= MS.new()

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Functions ──
//// ───────────────────────

lineStyle(styleInText) =>
	switch styleInText
		"───"		=> line.style_solid				//  Solid
		"---"		=> line.style_dashed			//  Dashed
		"···"		=> line.style_dotted			//  Dotted
		=> line.style_solid

queryPatterns(lastPrice, midPrice, prevPrice, isSwingHigh) =>
	if isSwingHigh
		prevPrice < midPrice and midPrice >= lastPrice
	else
		prevPrice > midPrice and midPrice <= lastPrice

method queryPatterns(SWINGS this, isSwingHigh) =>
	if isSwingHigh
		this.prevPrice < this.midPrice and this.midPrice >= this.lastPrice
	else
		this.prevPrice > this.midPrice and this.midPrice <= this.lastPrice

method updatePattern(SWINGS this, price, index) =>
	this.isCrossed := false
	this.prevPrice := this.midPrice, this.midPrice := this.lastPrice, this.lastPrice := price
	this.prevIndex := this.midIndex, this.midIndex := this.lastIndex, this.lastIndex := index

method setType(MS this, value) =>
	this.type := value

normalize(buy, sell, smooth)=>
	var os = 0
	var float max = na
	var float min = na
	os := buy ? 1 : sell ? -1 : os
	
	max := os > os[1] ? bar.close : os < os[1] ? max : math.max(bar.close, max)
	min := os < os[1] ? bar.close : os > os[1] ? min : math.min(bar.close, min)

	ta.sma((bar.close - min)/(max - min), smooth) * 100

shortMarketStructure() => 

	bull = false
	bear = false

	if queryPatterns(high, high[1], high[2], true )
		stHigh.updatePattern(high[1], bar_index[1])
		stHigh.isCrossed := false

	if bar.close > stHigh.lastPrice and not stHigh.isCrossed
		stHigh.isCrossed := true
		bull := true

	if queryPatterns(low , low[1] , low[2] , false) 
		stLow.isCrossed := false
		stLow.updatePattern(low[1], bar_index[1])

	if bar.close < stLow.lastPrice and not stLow.isCrossed
		stLow.isCrossed := true
		bear := true

	normalize(bull, bear, norm_Smooth)

marketStructure(SWINGS hSwingHigh, SWINGS hSwingLow, SWINGS lSwingHigh, SWINGS lSwingLow) => 

	bull = false
	bear = false 

	cSwingHigh = lSwingHigh.queryPatterns(true)

	if cSwingHigh and cSwingHigh != cSwingHigh[1]
		hSwingHigh.updatePattern(lSwingHigh.midPrice, lSwingHigh.midIndex)
		hSwingHigh.isCrossed := false

	if bar.close > hSwingHigh.lastPrice and not hSwingHigh.isCrossed
		hSwingHigh.isCrossed := true
		bull := true

	cSwingLow = lSwingLow.queryPatterns(false)

	if cSwingLow and cSwingLow != cSwingLow[1]
		hSwingLow.updatePattern(lSwingLow.midPrice, lSwingLow.midIndex)
		hSwingLow.isCrossed := false

	if bar.close < hSwingLow.lastPrice and not hSwingLow.isCrossed
		hSwingLow.isCrossed := true
		bear := true

	normalize(bull, bear, norm_Smooth)

collectData() => [shortMarketStructure(), marketStructure(itHigh, itLow, stHigh, stLow), marketStructure(ltHigh, ltLow, itHigh, itLow)]

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Maths ──
//// ───────────────────────

log.info("yaz_kizim {0} {1}", ltHigh.lastPrice, ltHigh.isCrossed)

if msOnChart1
	if bar.close > stHigh.lastPrice and not stHigh.isCrossed
		line.new(stHigh.lastIndex, stHigh.lastPrice, bar.index, stHigh.lastPrice,		color = cBullColorK1,	style = lineStyle(msOnChartK1),	width = 1,	force_overlay = true)

		if stMSLblK1
			box.new(stHigh.lastIndex, stHigh.lastPrice, bar.index, stHigh.lastPrice,	color(na), text = stMS.type < 0 ? 'CHoCH' : 'BoS',	text_color = cBullColorK1,	text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_bottom, force_overlay = true)
			stMS.setType(1)

	if bar.close < stLow.lastPrice and not stLow.isCrossed
		line.new(stLow.lastIndex, stLow.lastPrice, bar.index, stLow.lastPrice,			color = cBearColorK1,	style = lineStyle(msOnChartK1),	width = 1,	force_overlay = true)

		if stMSLblK1
			box.new(stLow.lastIndex, stLow.lastPrice, bar.index, stLow.lastPrice,		color(na), text = stMS.type > 0 ? 'CHoCH' : 'BoS',	text_color = cBearColorK1,	text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, force_overlay = true)
			stMS.setType(-1)

if msOnChart2
	if bar.close > itHigh.lastPrice and not itHigh.isCrossed
		line.new(itHigh.lastIndex, itHigh.lastPrice, bar.index, itHigh.lastPrice,		color = cBullColorK2,	style = lineStyle(msOnChartK2),	width = 1,	force_overlay = true)
		if stMSLblK2
			box.new(itHigh.lastIndex, itHigh.lastPrice, bar.index, itHigh.lastPrice,	color(na), text = itMS.type < 0 ? 'CHoCH' : 'BoS',	text_color = cBullColorK2,	text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_bottom, force_overlay = true)
			itMS.setType(1)

	if bar.close < itLow.lastPrice and not itLow.isCrossed
		line.new(itLow.lastIndex, itLow.lastPrice, bar.index, itLow.lastPrice,			color = cBearColorK2,	style = lineStyle(msOnChartK2),	width = 1,	force_overlay = true)
		if stMSLblK2
			box.new(itLow.lastIndex, itLow.lastPrice, bar.index, itLow.lastPrice,		color(na), text = itMS.type > 0 ? 'CHoCH' : 'BoS',	text_color = cBearColorK2,	text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, force_overlay = true)
			itMS.setType(-1)

if msOnChart3
	if bar.close > ltHigh.lastPrice and not ltHigh.isCrossed
		line.new(ltHigh.lastIndex, ltHigh.lastPrice, bar.index, ltHigh.lastPrice,		color = cBullColorK3,	style = lineStyle(msOnChartK3),	width = 1,	force_overlay = true)

		if stMSLblK3
			box.new(ltHigh.lastIndex, ltHigh.lastPrice, bar.index, ltHigh.lastPrice,	color(na), text = ltMS.type < 0 ? 'CHoCH' : 'BoS',	text_color = cBullColorK3,	text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_bottom, force_overlay = true)
			ltMS.setType(1)

	if bar.close < ltLow.lastPrice and not ltLow.isCrossed
		line.new(ltLow.lastIndex, ltLow.lastPrice, bar.index, ltLow.lastPrice,			color = cBearColorK3,	style = lineStyle(msOnChartK3),	width = 1,	force_overlay = true)

		if stMSLblK3
			box.new(ltLow.lastIndex, ltLow.lastPrice, bar.index, ltLow.lastPrice,		color(na), text = ltMS.type > 0 ? 'CHoCH' : 'BoS', text_color = cBearColorK3, text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, force_overlay = true)
			ltMS.setType(-1)

//// ───────────────────────
/// ─── MS Oscil ───
/// ─── Oscilador ──
//// ───────────────────────

/// ─── Lineal
oscTop				= plot(msOsc_Show or msDataK1 or msDataK2 or msDataK3 ? 100 : na,	'OSC Max',			color(na),						display = display.none,	editable = false)
upperBand			= plot(msOsc_Show or msDataK1 or msDataK2 or msDataK3 ? 85 : na,	'Sobrecompra',		color(na),						display = display.none,	editable = false)
midLine				= plot(msOsc_Show or msDataK1 or msDataK2 or msDataK3 ? 50 : na,	'Equilibrio',		color.new(msOscilColorMid, 50),	display = display,		editable = false)
lowerBand			= plot(msOsc_Show or msDataK1 or msDataK2 or msDataK3 ? 15 : na,	'Sobreventa',		color(na),						display = display.none,	editable = false)
oscBtm				= plot(msOsc_Show or msDataK1 or msDataK2 or msDataK3 ? 0 : na,		'OSC Min',			color(na),						display = display.none,	editable = false)

fill				(oscTop, upperBand, 100, 85,	top_color = color.new(msBearColor, 100),	bottom_color = color.new(msBearColor, 65),		title = "Area de Sobrecompra")
fill				(lowerBand, oscBtm, 15, 0,		top_color = color.new(msBullColor, 65),		bottom_color = color.new(msBullColor, 100),		title = "Area de Sobreventa")

[stValue1, stValue2, stValue3] = collectData()

/// ─── Oscilador
msOSC				= (msWeightK1 * nz(stValue1, 0) + msWeightK2 * nz(stValue2, 0) + msWeightK3 * nz(stValue3, 0)) / (msWeightK1 * (na(stValue1) ? 0 : 1) + msWeightK2 * (na(stValue2) ? 0 : 1) + msWeightK3 * (na(stValue3) ? 0 : 1))
msPlot				= plot(msOsc_Show ? msOSC : na,		'Oscilador Market Structure',			color.from_gradient(msOSC, 0, 100, msBearColor, msBullColor), 1,	display = display)

if oscSig and ta.change(math.sign(msOSC - 12)) > 0 
	label.new(bar.index, bar.low, '▢',			color = color(na),		textcolor = color.new(msOscilOSCColorBuy, 40),		size = size.normal,		style = label.style_label_up,		force_overlay = true)
if oscSig and ta.change(math.sign(msOSC - 80)) < 0 
	label.new(bar.index, bar.high, '▢',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 40),		size = size.normal,		style = label.style_label_down,		force_overlay = true)

/// ─── Histogram Cycle
plot				(msDataK1 ? stValue1 : na,			'Oscilador de rango corto',				msColorK1,	1,	display = display)
plot				(msDataK2 ? stValue2 : na,			'oscilador de rango Intermedio',		msColorK2,	1,	display = display)
plot				(msDataK3 ? stValue3 : na,			'Oscilador de rango Largo',				msColorK3,	1,	display = display)

cycleFast			= cycleOpt ? msOSC - ta.ema(msOSC, cyc_Smooth) + 50 : 50
plotcandle			(50., 50., 50., cycleFast,			'Histograma

 Cycle',	cycleFast > 50 ? cBullColor : cBearColor,	display = display,	bordercolor = cycleOpt ? cycleFast > 50 ? cBullColor : cBearColor : color.gray)

if cycleSig and ta.change(math.sign(cycleFast - 35)) > 0 
	label.new(bar.index, bar.low, '△',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)

if cycleSig and ta.change(math.sign(msOSC - 37)) and ta.change(math.sign(cycleFast - 36)) < 0 
	label.new(bar.index, bar.high, '▽',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,	force_overlay = true)

// if cycleSig and ta.change(math.sign(cycleFast - 54)) > 0 
// 	label.new(bar.index, bar.low, '▆',			color = color(na),		textcolor = color.new(msOscilOSCColorBuy, 5),	size = size.normal,	style = label.style_label_up,		force_overlay = true)
// if cycleSig and ta.change(math.sign(cycleFast - 46)) > 0 
// 	label.new(bar.index, bar.low, '▂',			color = color(na),		textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small, 	style = label.style_label_up,		force_overlay = true)
// if cycleSig and ta.change(math.sign(cycleFast - 30)) > 0 
// 	label.new(bar.index, bar.low, '●',			color = color(na),		textcolor = color.new(msOscilOSCColorBuy, 65),	size = size.tiny,	style = label.style_label_up,		force_overlay = true)

// if cycleSig and ta.change(math.sign(cycleFast - 47)) < 0 
// 	label.new(bar.index, bar.high, '▆',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 5),	size = size.normal,	style = label.style_label_down,		force_overlay = true)
// 	// label.new(bar.index, bar.high, '●',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 25),		style = label.style_label_down,		force_overlay = true)
// if cycleSig and ta.change(math.sign(cycleFast - 60)) < 0 
// 	label.new(bar.index, bar.high, '▂',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,		force_overlay = true)
// if cycleSig and ta.change(math.sign(cycleFast - 65)) < 0 
// 	label.new(bar.index, bar.high, '─',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,		force_overlay = true)
// if cycleSig and ta.change(math.sign(cycleFast - 70)) < 0 
// 	label.new(bar.index, bar.high, '●',			color = color(na),		textcolor = color.new(msOscilOSCColorSell, 65),	size = size.tiny,	style = label.style_label_down,		force_overlay = true)

// △ ⋀ ⋂ ∷ ∶ : ∵ ∴ ▽ ⋁ ⋃ ⥥ ◯ ▢ ■ □ ▬ ▭ ▮ ▯ ▓ ▒ ░
if cycleSig and ta.change(math.sign(msOSC - 40)) and ta.change(math.sign(cycleFast - 50)) > 0 
	label.new(bar.index, bar.low, '△',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 30),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if cycleSig and ta.change(math.sign(msOSC - 60)) and ta.change(math.sign(cycleFast - 50)) < 0 
	label.new(bar.index, bar.high, '▽',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 30),	size = size.normal,	style = label.style_label_down,	force_overlay = true)

// if msOsCycleSig and ta.change(math.sign(msOSC - msMarcaV1)) and ta.change(math.sign(cycleFast - msMarcaV2)) > 0 
// 	msOscVarBull
// if msOsCycleSig and ta.change(math.sign(msOSC - msMarcaC1)) and ta.change(math.sign(cycleFast - msMarcaC2)) < 0 
// 	msOscVarBear

/// ─── Mix Bull
if msOsCycleSig and ta.change(math.sign(msOSC - 20)) and ta.change(math.sign(cycleFast - 54)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 10),	size = size.large,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 30)) and ta.change(math.sign(cycleFast - 46)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 40),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 47)) and ta.change(math.sign(cycleFast - 38)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 40),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 60)) and ta.change(math.sign(cycleFast - 40)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 40),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 65)) and ta.change(math.sign(cycleFast - 53)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 40),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 55)) and ta.change(math.sign(cycleFast - 46)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 40),	size = size.normal,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 45)) and ta.change(math.sign(cycleFast - 30)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 75)) and ta.change(math.sign(cycleFast - 63)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 73)) and ta.change(math.sign(cycleFast - 57)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 70)) and ta.change(math.sign(cycleFast - 54)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 90)) and ta.change(math.sign(cycleFast - 55)) > 0 
	label.new(bar.index, bar.low, '▲',	color = color(na),	textcolor = color.new(msOscilOSCColorBuy, 50),	size = size.small,	style = label.style_label_up,	force_overlay = true)

/// ─── Mix Bear
if msOsCycleSig and ta.change(math.sign(msOSC - 80)) and ta.change(math.sign(cycleFast - 47)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 10),	size = size.large,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 85)) and ta.change(math.sign(cycleFast - 47)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 10),	size = size.large,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 90)) and ta.change(math.sign(cycleFast - 55)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 40),	size = size.normal,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 75)) and ta.change(math.sign(cycleFast - 55)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 40),	size = size.normal,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 70)) and ta.change(math.sign(cycleFast - 60)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 40),	size = size.normal,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 70)) and ta.change(math.sign(cycleFast - 65)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 40),	size = size.normal,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 85)) and ta.change(math.sign(cycleFast - 70)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 20)) and ta.change(math.sign(cycleFast - 40)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 30)) and ta.change(math.sign(cycleFast - 45)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,	force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 36)) and ta.change(math.sign(cycleFast - 45)) < 0 
	label.new(bar.index, bar.high, '▼',	color = color(na),	textcolor = color.new(msOscilOSCColorSell, 50),	size = size.small,	style = label.style_label_down,	force_overlay = true)

if msOsCycleSig and ta.change(math.sign(msOSC - 15)) and ta.change(math.sign(cycleFast - 50)) > 0
	label.new(bar.index, bar.low, '◓',		color = color(na),		textcolor = msOscilOSCColorBuy,		size = size.normal,		style = label.style_label_up,		force_overlay = true)
if msOsCycleSig and ta.change(math.sign(msOSC - 85)) and ta.change(math.sign(cycleFast - 50)) < 0 
	label.new(bar.index, bar.high, '◒',		color = color(na),		textcolor = msOscilOSCColorSell,	size = size.normal,		style = label.style_label_up,		force_overlay = true)

fill				(msPlot, midLine, 100, cycleOpt ? 60 : 50, top_color = color.new(msBullColor,   0), bottom_color = color.new(msBullColor, 100), title = "Bullish Gradient Fill")
fill				(msPlot, midLine,  cycleOpt ? 40 : 50,  0, top_color = color.new(msBearColor, 100), bottom_color = color.new(msBearColor,   0), title = "Bearish Gradient Fill")

//// ─────────────────────────────────────────────────────────────────────
